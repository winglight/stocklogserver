{"version":3,"sources":["models/SelectedStockModel.js","models/LogModel.js","models/data_provider_config.js","component/LogQuickCreateButton.js","component/LogQuickEditButton.js","component/AddToGroupButton.js","screens/SelectedStockList.js","models/ReasonModel.js","component/ReasonQuickCreateButton.js","screens/LogList.js","screens/ReasonList.js","models/api.js","component/AxisPriceList.js","screens/dashboard/SelectedStocks.js","screens/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Status","SELECTED","CANDIDATED","POSITIONED","SOLDOUT","StatusSelect","id","name","StrategyCategory","HyperParams","SelectedStockModel","status","this","destroy","success","myObject","debug","error","set","save","Parse","Query","find","get","date","strategy","hyper_params","code","query","equalTo","Object","registerSubclass","LogType","UNCANDIDATE","CANDIDATE","BID","PRICING","ORDER","HOLD","SELL","TRANSFER_OUT","TRANSFER_IN","StarSelect","SuggestionType","NONE","BUY","LogSelect","SuggestionSelect","LogModel","selected_stock_id","suggested_low_price","suggested_high_price","expected_low_price","expected_high_price","current_price","current_position","suggested_action","star","score","reason_ids","logType","comment","isSuccessful","url","findAll","then","news","destroyAll","console","log","JSON","stringify","findById","stock","parseConfig","URL","JAVASCRIPT_KEY","APP_ID","dataProvider","ParseClient","authProvider","ParseAuth","reasonOptionRenderer","reason","content","LogQuickCreateButton","state","showDialog","handleClick","setState","handleCloseClick","handleSaveClick","submit","props","handleSubmit","values","crudGetMatching","change","fetchStart","fetchEnd","showNotification","CREATE","data","page","perPage","field","order","catch","message","finally","isSubmitting","logTypeName","x","onClick","label","Dialog","fullWidth","open","onClose","aria-label","DialogTitle","DialogContent","SimpleForm","form","resource","onSubmit","toolbar","NumberInput","source","ReferenceArrayInput","reference","sort","filter","SelectArrayInput","optionText","options","fullWidthInput","SelectInput","choices","defaultValue","DialogActions","SaveButton","saving","Component","mapDispatchToProps","connect","LogQuickEditButton","logObj","record","UPDATE","previousData","key","AddToGroupButton","selectedIds","notify","useRefresh","useNotify","unselectAll","useUnselectAll","GET_ONE","response","axios","params","err","cardActionStyle","zIndex","display","float","StrategyField","ListPagination","Pagination","rowsPerPageOptions","AxisPriceField","axisPrice","high","low","close","resistPrice1","resistPrice2","resistPrice3","supportPrice1","supportPrice2","supportPrice3","upPrice","Math","max","volatility","downPrice","suggestBuyPrice1","min","suggestBuyPrice2","toFixed","HyperParamsField","hps","split","map","item","index","ListActions","filters","displayedFilters","filterValues","basePath","showFilter","CardActions","style","CreateButton","RefreshButton","BulkActionButtons","BulkDeleteButton","ShowActions","Button","component","Link","to","pathname","color","EditActions","ShowButton","ListFilter","Filter","filterdefaultvalues","alwaysOn","DateInput","moment","format","TextInput","SelectedStockList","List","title","pagination","actions","bulkActionButtons","Datagrid","multiSelectable","bodyoptions","stripedRows","showRowHover","displayRowCheckbox","headeroptions","adjustForCheckbox","rowoptions","selectable","rowClick","expand","TextField","SelectField","NumberField","maximumFractionDigits","currency","EditButton","LogShow","Show","SimpleShowLayout","ReferenceManyField","target","ReferenceArrayField","SingleFieldList","ChipField","DateField","locales","showTime","RichTextField","BooleanField","valueLabelTrue","valueLabelFalse","SelectedStockShow","SelectedStockEdit","Edit","FormDataConsumer","formData","parseInt","SelectedStockCreate","Create","ReasonModel","seq","ReasonQuickCreateButton","LogFilter","ReferenceInput","selectStockOptionRenderer","ReasonReferenceInput","redirect","LogList","bodyOptions","headerOptions","rowOptions","ReferenceField","DeleteButton","LogEdit","GET_MANY","ids","list","count","ReasonCollection","sum","value","toString","e","BooleanInput","ampm","clearable","reduce","a","b","Array","LogCreate","ReasonFilter","CreateToolbar","Toolbar","submitOnEnter","variant","ReasonList","ReasonShow","ReasonEdit","step","ReasonCreate","create","baseURL","AxisPriceList","useStyles","makeStyles","main","flex","marginLeft","marginTop","card","padding","overflow","textAlign","minHeight","SelectedStocksTable","classes","useState","useTranslate","useMemo","Date","setDate","getDate","setHours","setMinutes","setSeconds","setMilliseconds","useQueryWithStore","type","payload","loaded","stocks","className","Card","Divider","ListItem","ListItemText","primary","styles","flexColumn","flexDirection","leftCol","marginRight","rightCol","singleCol","marginBottom","SelectedStocks","App","Admin","dashboard","Dashboard","Resource","show","edit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8f124ebc.chunk.js","sourcesContent":["import Parse from 'parse/node';\nimport debug from 'debug';\nimport moment from 'moment';\n\nexport const Status = {\n    SELECTED: \"0\",\n    CANDIDATED: \"1\",\n    POSITIONED: \"2\",\n    SOLDOUT: \"3\",\n};\nexport const StatusSelect = [\n    { id: \"0\", name: '海选' },\n    { id: \"1\", name: '精选' },\n    { id: \"2\", name: '持仓' },\n    { id: \"3\", name: '清仓' },\n];\nexport const StrategyCategory = [\n    { id: 'qa_gb_ranjl', name: 'QA版GB价量策略' },\n    { id: 'good_bad', name: 'gb策略' },\n    { id: 'gb_volat_true', name: '波动率反序' },\n    { id: 'gb_volat_false', name: '波动率正序' },\n    { id: 'con_gb_prev_3', name: '连续good=3策略(前)' },\n    { id: 'con_gb_3', name: '连续good=3策略' },\n    { id: 'con_good', name: '连续good策略' },\n    { id: 'ema8_ema20_cross', name: 'EMA突破策略' },\n    { id: '0', name: '---------' },\n    { id: 'gb_volat_false', name: '波动率正序' },\n];\nexport const HyperParams = [\n    { id: \"1,4,6,90,3\", name:\"1,4,6,90,3\"},\n    { id: \"5,3,6,40,5\", name:\"5,3,6,40,5\"},\n    { id: \"10,3,5,40,5\", name:\"10,3,5,40,5\"},\n    { id: \"5,3,7,40,5\", name:\"5,3,7,40,5\"},\n    { id: \"10,2,7,40,4\", name:\"10,2,7,40,4\"},\n    { id: \"10,2,6,40,5\", name:\"10,2,6,40,5\"},\n    {id: \"0\", name:\"----------\"},\n    { id: \"5,1,5,50,4\", name:\"5,1,5,50,4\"},\n    { id: \"7,1,5,50,4\", name:\"7,1,5,50,4\"},\n    { id: \"7,2,5,60,4\", name:\"7,2,5,60,4\"},\n];\n// export const StrategyCategory = [\n//     { id: 'gb_volat_false', name: '波动率正序' },\n//     { id: 'good_bad', name: 'gb策略' },\n//     { id: 'con_gb_3', name: '连续good=3策略' },\n//     { id: 'gb_volat_true', name: '波动率反序' },\n//     { id: 'con_good', name: '连续good策略' },\n// ];\n// export const HyperParams = [\n//\n//     { id: \"5,1,5,50,4\", name:\"5,1,5,50,4\"},\n//     { id: \"5,1,6,50,4\", name:\"5,1,6,50,4\"},\n//     { id: \"5,2,7,40,5\", name:\"5,2,7,40,5\"},\n//     { id: \"10,2,6,40,4\", name:\"10,2,6,40,4\"},\n//     { id: \"10,2,7,50,4\", name:\"10,2,7,50,4\"},\n//     { id: \"10,2,7,40,4\", name:\"10,2,7,40,4\"},\n// ];\n\nexport class SelectedStockModel extends Parse.Object {\n    constructor() {\n        // Pass the ClassName to the Parse.Object constructor\n        super('SelectedStockModel');\n\n        // this.date;\n        // this.strategy;//策略名称\n        // this.hyper_params;//超参数组合\n        // this.code;\n        // this.name = \"\";\n        // this.good_bad;//gb策略值\n        // this.good10_count;//窗口期内good值合计\n        // this.bad10_count;//窗口期内bad值合计\n        // this.good;//当天good值\n        // this.bad;//当天bad值\n        // this.con_good;//截止当天连续good值为1的合计\n        // this.volatility;//波动率\n        // this.volat_price;//波动价格\n        // this.totalCapital;//流通市值\n        // this.price365_max;//过去365个交易日价格最大值\n        // this.price50_max;//过去50个交易日价格平均值变更比例\n        // this.price365_change;//过去365个交易日价格平均值变更比例\n        // this.price50_change;//过去50个交易日价格平均值变更比例\n        // this.vol50_change;//过去50个交易日成交量平均值变更比例\n        // this.return_rate;//回报率\n        // this.star = \"D\";//评级：A - 建议购买；B - 待观察；C - 不建议购买\n        this.status = Status.SELECTED;\n    }\n\n    static findAll() {\n        var query = new Parse.Query(SelectedStockModel);\n        // query.notEqualTo(\"url\", '');\n        return query.find();\n    }\n\n    static findById(id) {\n        var query = new Parse.Query(SelectedStockModel);\n        // query.notEqualTo(\"url\", '');\n        return query.get(id);\n    }\n\n    static findByDateNSHCode(date, strategy, hyper_params, code) {\n        var query = new Parse.Query(SelectedStockModel);\n        query.equalTo(\"date\", date);\n        query.equalTo(\"strategy\", strategy);\n        query.equalTo(\"hyper_params\", hyper_params);\n        query.equalTo(\"code\", code);\n        return query.find();\n    }\n\n    delete() {\n        this.destroy({\n            success: function(myObject) {\n                // The object was deleted from the Parse Cloud.\n                debug(\"Successfully deleted \" + myObject.name);\n            },\n            error: function(myObject, error) {\n                // The delete failed.\n                // error is a Parse.Error with an error code and message.\n                debug(\"deleted error:\" + error);\n            }\n        });\n    }\n\n    update() {\n        this.set(\"name\", this.name);\n\n        return this.save();\n    }\n\n}\n\nParse.Object.registerSubclass('SelectedStockModel', SelectedStockModel);","import Parse from 'parse/node';\nimport debug from 'debug';\nimport {SelectedStockModel, Status} from \"./SelectedStockModel\";\n\n//log类型\nexport const LogType = {\n  UNCANDIDATE: \"uncandidate\",//未选中\n  CANDIDATE: \"candidate\",//选中\n  BID: \"bid\",//竞价\n  PRICING: \"price\",//更新止盈止损价格\n  ORDER: \"order\",//下单\n  HOLD: \"hold\",//持有\n  SELL: \"sell\",//卖出\n  TRANSFER_OUT: \"out\",//现金转出\n  TRANSFER_IN: \"in\",//现金转入\n};\n//评级\nexport const StarSelect = [\n    { id: \"6\", name: 'A+（>5）' },\n    { id: \"5\", name: 'A（5）' },\n    { id: \"4\", name: 'A-（4）' },\n    { id: \"3\", name: 'B+（3）' },\n    { id: \"2\", name: 'B（2）' },\n    { id: \"1\", name: 'B-（1）' },\n    { id: \"0\", name: 'C（0）' },\n    { id: \"-1\", name: 'D（<0）' },\n];\n\n//建议类型\nexport const SuggestionType = {\n  NONE: \"none\",//无\n  BUY: \"buy\",//买入\n  HOLD: \"hold\",//持有\n  SELL: \"sell\",//卖出\n};\n\nexport const LogSelect = [\n    { id: \"uncandidate\", name: '未选中' },\n    { id: \"candidate\", name: '选中' },\n    { id: \"bid\", name: '竞价' },\n    { id: \"price\", name: '更新止盈止损价格' },\n    { id: \"order\", name: '下单' },\n    { id: \"hold\", name: '持有' },\n    { id: \"sell\", name: '卖出' },\n];\n\nexport const SuggestionSelect = [\n    { id: \"none\", name: '无' },\n    { id: \"buy\", name: '买入' },\n    { id: \"hold\", name: '持有' },\n    { id: \"sell\", name: '卖出' },\n];\n\nexport default class LogModel extends Parse.Object {\n    constructor() {\n        // Pass the ClassName to the Parse.Object constructor\n        super('LogModel');\n\n        this.selected_stock_id=\"\";//父对象：选中股票id\n        this.suggested_low_price = 0;//建议较低价格\n        this.suggested_high_price = 0;//建议较高价格\n        this.expected_low_price = 0;//止损价格\n        this.expected_high_price = 0;//止盈价格\n        this.current_price = 0;//当前价格\n        this.current_position = 0;//当前仓位（占比）\n        this.suggested_action = SuggestionType.NONE;//推荐动作\n        this.star = \"D\";//评级：A - 建议购买；B - 待观察；C - 不建议购买\n        this.score = 0;//评分——来自理由的综合得分\n        this.reason_ids = [];//理由，id数组\n        this.logType = LogType.UNCANDIDATE;//log类型\n        this.comment = \"\";//操作评价\n        this.isSuccessful = false;//操作是否满意\n        // this.commentTime = \"\";//操作评价时间\n    }\n\n    findAll() {\n        var query = new Parse.Query(LogModel);\n        // query.notEqualTo(\"contentType\", 'img');\n        return query.find();\n    }\n\n    findByUrl(url) {\n        var query = new Parse.Query(LogModel);\n        query.equalTo(\"url\", url);\n        return query.find();\n    }\n\n    refreshDataFromParse() {\n      return {\n        'id': this.get(\"objectId\"),\n      }\n    }\n\n    deleteAll() {\n        this.findAll().then(function(news) {\n            // console.log(\"deleting \" + JSON.stringify(posts));\n            Parse.Object.destroyAll(news);\n        }, function(error) {\n            console.log(\"deleteAll error \" + JSON.stringify(error));\n        });\n    }\n\n    delete() {\n        this.destroy({\n            success: function(myObject) {\n                // The object was deleted from the Parse Cloud.\n                debug(\"Successfully deleted \" + myObject.name);\n            },\n            error: function(myObject, error) {\n                // The delete failed.\n                // error is a Parse.Error with an error code and message.\n                debug(\"deleted error:\" + error);\n            }\n        });\n    }\n\n    save() {\n        if(!this.id && this.logType === LogType.CANDIDATE){\n            SelectedStockModel.findById(this.selected_stock_id)\n                .then((stock) => {\n                    // The object was retrieved successfully.\n                    stock.status = Status.CANDIDATED\n                    stock.save();\n                }, (error) => {\n                    // The object was not retrieved successfully.\n                    // error is a Parse.Error with an error code and message.\n                });\n        }\n        return this.save();\n    }\n\n}\n\nParse.Object.registerSubclass('LogModel', LogModel);\n","import {ParseAuth, ParseClient} from \"ra-data-parse\";\n\nconst parseConfig = {\n    URL: 'http://localhost:1337/parse',\n    JAVASCRIPT_KEY: '',\n    APP_ID: 'stocklog'\n}\n\nexport const dataProvider = ParseClient(parseConfig);\n// Pass it as the second parameter after the base URL.\nexport const authProvider = ParseAuth(parseConfig);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport {\n    fetchEnd,\n    fetchStart,\n    required,\n    showNotification,\n    crudGetMatching,\n    Button,\n    SaveButton,\n    SimpleForm,\n    TextInput,\n    NumberInput,\n    LongTextInput,\n    ReferenceArrayInput,\n    SelectArrayInput,\n    SelectInput,\n    CREATE,\n    REDUX_FORM_NAME\n} from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/Add';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport {dataProvider} from \"../models/data_provider_config\";\nimport LogModel from \"../models/LogModel\";\nimport {LogSelect, StarSelect, SuggestionSelect} from \"../models/LogModel\";\n\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\n\nclass LogQuickCreateButton extends Component {\n    state = {\n        selected_stock_id: \"\",\n        logType: \"\",\n        error: false,\n        showDialog: false\n    };\n\n    handleClick = () => {\n        this.setState({ showDialog: true });\n    };\n\n    handleCloseClick = () => {\n        this.setState({ showDialog: false });\n    };\n\n    handleSaveClick = () => {\n        const { submit } = this.props;\n\n        // Trigger a submit of our custom quick create form\n        // This is needed because our modal action buttons are oustide the form\n        submit('log-quick-create');\n    };\n\n    handleSubmit = values => {\n        const {\n            logType,\n            selected_stock_id,\n            change,\n            crudGetMatching,\n            fetchStart,\n            fetchEnd,\n            showNotification\n        } = this.props;\n\n        // Dispatch an action letting react-admin know a API call is ongoing\n        fetchStart();\n\n        // As we want to know when the new post has been created in order to close the modal, we use the\n        // dataProvider directly\n        // let logObj = new LogModel();\n        // logObj.selected_stock_id = selected_stock_id;\n        // logObj.current_price = values.current_price;\n        // logObj.current_position = values.current_position;\n        // logObj.reason_ids = values.reason_ids;\n        // logObj.logType = values.logType;\n\n        values.selected_stock_id = selected_stock_id;\n\n        dataProvider(CREATE, 'LogModel', { data: values })\n            .then(({ data }) => {\n                // Refresh the choices of the ReferenceInput to ensure our newly created post\n                // always appear, even after selecting another post\n                crudGetMatching(\n                    'LogModel',\n                    '',\n                    { page: 1, perPage: 100 },\n                    { field: 'content', order: 'ASC' },\n                    {selected_stock_id: selected_stock_id}\n                );\n\n                // Update the main react-admin form (in this case, the comments creation form)\n                // change(REDUX_FORM_NAME, 'post_id', data.id);\n                this.setState({ showDialog: false });\n            })\n            .catch(error => {\n                showNotification(error.message, 'error');\n            })\n            .finally(() => {\n                // Dispatch an action letting react-admin know a API call has ended\n                fetchEnd();\n            });\n    };\n\n    render() {\n        const { showDialog } = this.state;\n        const { isSubmitting, logType } = this.props;\n        const logTypeName = LogSelect.find(x => x.id === logType).name;\n\n        return (\n            <Fragment>\n                <Button onClick={this.handleClick} label={logTypeName}>\n                </Button>\n                <Dialog\n                    fullWidth\n                    open={showDialog}\n                    onClose={this.handleCloseClick}\n                    aria-label={\"新建理由 - \" + logTypeName}\n                >\n                    <DialogTitle>{\"新建理由 - \" + logTypeName}</DialogTitle>\n                    <DialogContent>\n                        <SimpleForm\n                            // We override the redux-form name to avoid collision with the react-admin main form\n                            form=\"log-quick-create\"\n                            resource=\"LogModel\"\n                            // We override the redux-form onSubmit prop to handle the submission ourselves\n                            onSubmit={this.handleSubmit}\n                            // We want no toolbar at all as we have our modal actions\n                            toolbar={null}\n                        >\n                            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\n                            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\n                            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\n                            <NumberInput source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\n                            <NumberInput source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\n                            <NumberInput source=\"current_position\" label={\"当前仓位\"}/>\n                            <ReferenceArrayInput label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\" perPage={10000}\n                                                 sort={{ field: 'seq', order: 'ASC' }} filter={{ content: logTypeName }}>\n                                <SelectArrayInput optionText={reasonOptionRenderer}\n                                                  options={{\n                                                      fullWidth: true,\n                                                      fullWidthInput: true,\n                                                  }}\n                                />\n                            </ReferenceArrayInput>\n                            <SelectInput source=\"logType\" label={\"LOG类型\"} choices={LogSelect} defaultValue={logType} />\n                        </SimpleForm>\n                    </DialogContent>\n                    <DialogActions>\n                        <SaveButton\n                            saving={isSubmitting}\n                            onClick={this.handleSaveClick}\n                        />\n                        <Button\n                            label=\"ra.action.cancel\"\n                            onClick={this.handleCloseClick}\n                        >\n                            <IconCancel />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isSubmitting: isSubmitting('log-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n    change,\n    crudGetMatching,\n    fetchEnd,\n    fetchStart,\n    showNotification,\n    submit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    LogQuickCreateButton\n);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport {\n    fetchEnd,\n    fetchStart,\n    required,\n    showNotification,\n    crudGetMatching,\n    Button,\n    SaveButton,\n    SimpleForm,\n    TextInput,\n    NumberInput,\n    LongTextInput,\n    ReferenceArrayInput,\n    SelectArrayInput,\n    SelectInput,\n    UPDATE,\n    Edit,\n    REDUX_FORM_NAME\n} from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/Add';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport {dataProvider} from \"../models/data_provider_config\";\nimport LogModel, {LogType} from \"../models/LogModel\";\nimport {LogSelect, StarSelect, SuggestionSelect} from \"../models/LogModel\";\n\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\n\nclass LogQuickEditButton extends Component {\n    state = {\n        logObj: {},\n        error: false,\n        showDialog: false\n    };\n\n    handleClick = () => {\n        this.setState({ showDialog: true });\n    };\n\n    handleCloseClick = () => {\n        this.setState({ showDialog: false });\n    };\n\n    handleSaveClick = () => {\n        const { submit, record } = this.props;\n\n        // Trigger a submit of our custom quick create form\n        // This is needed because our modal action buttons are oustide the form\n        submit(`log-quick_edit_${record.id}`);\n    };\n\n    handleSubmit = values => {\n        const {\n            record,\n            change,\n            crudGetMatching,\n            fetchStart,\n            fetchEnd,\n            showNotification\n        } = this.props;\n\n        // Dispatch an action letting react-admin know a API call is ongoing\n        fetchStart();\n\n        // console.log(\"record: \" + JSON.stringify(record));\n        // console.log(\"values: \" + JSON.stringify(values));\n\n        // record.suggested_low_price = values.suggested_low_price;\n        // record.suggested_high_price = values.suggested_high_price;\n        // record.expected_low_price = values.expected_low_price;\n        // record.expected_high_price = values.expected_high_price;\n        // record.current_price = values.current_price;\n\n        dataProvider(UPDATE, 'LogModel', { id: values.id, data: values, previousData: record })\n            .then(({ data }) => {\n                // Refresh the choices of the ReferenceInput to ensure our newly created post\n                // always appear, even after selecting another post\n                crudGetMatching(\n                    'LogModel',\n                    '',\n                    { page: 1, perPage: 100 },\n                    { field: 'content', order: 'ASC' },\n                    {id: data.id}\n                );\n\n                // Update the main react-admin form (in this case, the comments creation form)\n                // change(REDUX_FORM_NAME, 'post_id', data.id);\n                this.setState({ showDialog: false });\n            })\n            .catch(error => {\n                showNotification(error.message, 'error');\n            })\n            .finally(() => {\n                // Dispatch an action letting react-admin know a API call has ended\n                fetchEnd();\n            });\n    };\n\n    render() {\n        const { showDialog } = this.state;\n        const { isSubmitting, record } = this.props;\n        let logType = LogSelect.find(x => (x.id === record.logType)).name;\n\n        return (\n            <Fragment>\n                <Button onClick={this.handleClick} label=\"改价\">\n                </Button>\n                <Dialog\n                    fullWidth\n                    open={showDialog}\n                    onClose={this.handleCloseClick}\n                    aria-label=\"修改价格\"\n                    key={record.id}\n                >\n                    <DialogTitle>{logType + \" - 修改价格\"}</DialogTitle>\n                    <DialogContent>\n                        <SimpleForm\n                            key={record.id}\n                            // We override the redux-form name to avoid collision with the react-admin main form\n                            form={`log-quick_edit_${record.id}`}\n                            resource=\"LogModel\"\n                            // We override the redux-form onSubmit prop to handle the submission ourselves\n                            onSubmit={this.handleSubmit}\n                            // We want no toolbar at all as we have our modal actions\n                            toolbar={null}\n                            {...this.props}\n                        >\n                            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\n                            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\n                            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\n                            <NumberInput source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\n                            <NumberInput source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\n\n                        </SimpleForm>\n                    </DialogContent>\n                    <DialogActions>\n                        <SaveButton\n                            saving={isSubmitting}\n                            onClick={this.handleSaveClick}\n                        />\n                        <Button\n                            label=\"ra.action.cancel\"\n                            onClick={this.handleCloseClick}\n                        >\n                            <IconCancel />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isSubmitting: isSubmitting('log-quick-edit')(state)\n});\n\nconst mapDispatchToProps = {\n    change,\n    crudGetMatching,\n    fetchEnd,\n    fetchStart,\n    showNotification,\n    submit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    LogQuickEditButton\n);\n","import React, { Component, Fragment } from 'react';\nimport {\n    Button,\n    useRefresh,\n    useNotify,\n    useUnselectAll,\n    GET_ONE\n} from 'react-admin';\nimport {dataProvider} from \"../models/data_provider_config\";\n\nimport axios from 'axios'\n\nconst AddToGroupButton = ({ selectedIds, resource }) => {\n    const refresh = useRefresh();\n    const notify = useNotify();\n    const unselectAll = useUnselectAll();\n\n    const handleSubmit = () => {\n        // console.log(\"selectedIds: \", selectedIds);\n        dataProvider(GET_ONE, 'SelectedStockModel', { id: selectedIds[0] })\n            .then(response => {\n                // console.log(response.data); // { id: 123, title: \"hello, world\" }\n                let code = response.data.code;\n                axios.get(\"/addtogroup\",\n                    { params: {code: code}}\n                ).then(function (response) {\n                    notify(response.data);\n                    unselectAll(resource);\n                }).catch(function (err) {\n                    notify('Error: addtogroup ' + err, 'warning')\n                });\n            });\n\n\n    };\n\n    return (\n            <Button\n                label=\"加入自选股\"\n                onClick={handleSubmit}\n            >\n            </Button>\n    );\n};\n\nexport default AddToGroupButton;\n","import React, { Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n    List,\n    Filter,\n    Show,\n    SimpleShowLayout,\n    TextField,\n    NumberField,\n    DateField,\n    SelectField,\n    ImageField,\n    UrlField,\n    BooleanField,\n    RichTextField,\n    ReferenceManyField,\n    ReferenceArrayField,\n    SingleFieldList,\n    ChipField,\n    Edit,\n    Create,\n    Datagrid,\n    EditButton,\n    SelectInput,\n    FormDataConsumer,\n    SimpleForm,\n    Pagination,\n    CardActions,\n    TextInput,\n    ShowButton,\n    DeleteButton,\n    BulkDeleteButton,\n    RefreshButton,\n    GET_MANY\n} from 'react-admin';\nimport {showNotification, CreateButton} from 'react-admin';\nimport { Link } from 'react-router-dom';\nimport { DateInput, DateTimeInput } from 'react-admin';\nimport moment from 'moment';\nimport {StrategyCategory, HyperParams, StatusSelect, Status} from '../models/SelectedStockModel'\nimport LogModel, {LogSelect, SuggestionSelect, StarSelect, LogType, SuggestionType} from \"../models/LogModel\";\nimport LogQuickCreateButton from \"../component/LogQuickCreateButton\"\nimport LogQuickEditButton from \"../component/LogQuickEditButton\"\nimport AddToGroupButton from \"../component/AddToGroupButton\"\nimport {dataProvider} from \"../models/data_provider_config\";\n\nconst cardActionStyle = {\n    zIndex: 2,\n    display: 'inline-block',\n    float: 'right',\n};\n\nconst StrategyField = ({ source, record = {} }) => <span>{StrategyCategory.find(x => x.id === record[source]).name}</span>;\n\nconst ListPagination = props => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\nconst AxisPriceField = ({ source, record, ...props  }) => {\n    let axisPrice = (record.high + record.low + record.close)/3;\n    let resistPrice1 = 2 * axisPrice - record.low;\n    let resistPrice2 = axisPrice + record.high - record.low;\n    let resistPrice3 = resistPrice1 + record.high - record.low;\n    let supportPrice1 = 2 * axisPrice - record.high;\n    let supportPrice2 = axisPrice - (record.high - record.low);\n    let supportPrice3 = supportPrice1 - (record.high - record.low);\n\n    let upPrice = Math.max((1 + record.volatility) * record.close, resistPrice2);\n    let downPrice = Math.max((1 - record.volatility) * record.close, supportPrice1);\n    let suggestBuyPrice1 = Math.min((1 - record.volatility) * record.close, supportPrice2);\n    let suggestBuyPrice2 = Math.min((1 + record.volatility) * record.close, resistPrice1);\n\n    return (\n        <ul>\n             <li key=\"upPrice\">{\"止盈价格：\" + upPrice.toFixed(2)}</li>\n             <li key=\"downPrice\">{\"止损价格：\" + downPrice.toFixed(2)}</li>\n             <li key=\"suggestBuyPrice2\">{\"建议买入价格(高)：\" + suggestBuyPrice2.toFixed(2)}</li>\n             <li key=\"suggestBuyPrice1\">{\"建议买入价格(低)：\" + suggestBuyPrice1.toFixed(2)}</li>\n             <li key=\"resistPrice3\">{\"阻力3：\" + resistPrice3.toFixed(2)}</li>\n             <li key=\"resistPrice2\">{\"阻力2：\" + resistPrice2.toFixed(2)}</li>\n             <li key=\"resistPrice1\">{\"阻力1：\" + resistPrice1.toFixed(2)}</li>\n             <li key=\"axisPrice\">{\"轴 心 ：\" + axisPrice.toFixed(2)}</li>\n             <li key=\"supportPrice1\">{\"支撑1：\" + supportPrice1.toFixed(2)}</li>\n             <li key=\"supportPrice2\">{\"支撑2：\" + supportPrice2.toFixed(2)}</li>\n             <li key=\"supportPrice3\">{\"支撑3：\" + supportPrice3.toFixed(2)}</li>\n        </ul>\n    );\n}\nconst HyperParamsField = ({ source, record, ...props  }) => {\n    let hps = record.hyper_params.split(\" \");\n\n    return (\n        <ul>{\n            hps.map((item, index) => {\n                return (<li key={index}>{item}</li>);\n            })\n        }\n        </ul>\n    );\n}\n\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\n    <CardActions style={cardActionStyle}>\n        <CreateButton basePath={basePath}/>\n        <RefreshButton/>\n    </CardActions>\n);\nconst BulkActionButtons = props => (\n    <Fragment>\n        <AddToGroupButton {...props}/>\n        {/* default bulk delete action */}\n        <BulkDeleteButton {...props} />\n    </Fragment>\n);\n\nconst ShowActions = ({ basePath, data, resource }) => (\n    <CardActions style={cardActionStyle}>\n        <Button component={Link}\n                to={{\n                    pathname: '/LogModel',\n                    state: { record: { selected_stock_id: data && data.id } },\n                }} color=\"primary\" >日志列表</Button>\n        {/* Add your custom actions */}\n        <Button component={Link}\n                    to={{\n                        pathname: '/LogModel/create',\n                        state: { record: { selected_stock_id: data && data.id } },\n                    }} color=\"primary\" >选股</Button>\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.BID} />\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.PRICING} />\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.ORDER} />\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.HOLD} />\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.SELL} />\n    </CardActions>\n);\n\nconst EditActions = ({ basePath, data, resource }) => (\n    <CardActions style={cardActionStyle}>\n        <ShowButton basePath={basePath} record={data} />\n    </CardActions>\n);\n\nconst ListFilter = (props) => (\n    <Filter {...props}>\n        <SelectInput label=\"策略\" source=\"strategy\" choices={StrategyCategory} filterdefaultvalues={StrategyCategory[0]} alwaysOn/>\n        <SelectInput label=\"超参数\" source=\"hyper_params\" choices={HyperParams} filterdefaultvalues=\"\" alwaysOn/>\n        <DateInput label=\"选股日期\" source=\"date\" filterdefaultvalues={moment().format('YYYY-MM-DD')} alwaysOn />\n        <TextInput label=\"股票编码\" source=\"code\" filterdefaultvalues=\"\" alwaysOn />\n        <TextInput label=\"搜索\" source=\"q\" filterdefaultvalues=\"\" alwaysOn />\n        <SelectInput label=\"状态\" source=\"status\" choices={StatusSelect} filterdefaultvalues=\"\" alwaysOn/>\n    </Filter>\n);\n\nexport const SelectedStockList = (props) => (\n    <List {...props} title={\"选股列表\"} filters={<ListFilter />} sort={{field: 'date', order: 'DESC'}} perPage={25} pagination={<ListPagination />}\n          actions={<ListActions/>} bulkActionButtons={<BulkActionButtons />}>\n        <Datagrid options={{multiSelectable:true}} bodyoptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}}\n                  headeroptions={{adjustForCheckbox:true}} rowoptions={{selectable: true}} rowClick=\"expand\" expand={<LogShow />}>\n            {/*<TextField source=\"id\"/>*/}\n            <TextField source=\"date\" label={\"选股日期\"}/>\n            <TextField source=\"code\"label={\"代码\"}/>\n            <TextField source=\"name\"label={\"名称\"}/>\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <StrategyField source=\"strategy\" label={\"策略名称\"}/>\n            <HyperParamsField source=\"hyper_params\"label={\"超参数组合\"}/>\n            <NumberField source=\"good_bad\"label={\"gb策略值\"}/>\n            <NumberField source=\"volatility\"label={\"波动率\"} options={{ style: 'percent', maximumFractionDigits: 2 }} />\n            <NumberField source=\"volat_price\"label={\"波动价格\"} options={{ style: 'currency', currency: 'CNY' }}/>\n            <AxisPriceField label={\"轴心价格\"}/>\n            <NumberField source=\"vol50_change\"label={\"成交量变动\"} options={{ maximumFractionDigits: 2 }} />\n            {/*<NumberField source=\"close_slope\"label={\"close斜率\"} options={{ maximumFractionDigits: 2 }} />*/}\n            {/*<NumberField source=\"open_slope\"label={\"open斜率\"} options={{ maximumFractionDigits: 2 }} />*/}\n            <NumberField source=\"totalCapital\"label={\"流通市值\"} options={{ style: 'currency', currency: 'CNY' }}/>\n            <SelectField source=\"status\" label={\"状态\"} choices={StatusSelect} />\n            <EditButton/>\n            <ShowButton/>\n        </Datagrid>\n    </List>\n);\n\nexport const LogShow = (props) => (\n    <Show title=\"l\" actions={<ShowActions/>} {...props}>\n    <SimpleShowLayout>\n    <ReferenceManyField\n        label=\"\"\n        reference=\"LogModel\"\n        target=\"selected_stock_id\"\n        sort={{ field: 'createdAt', order: 'ASC' }}\n    >\n        <Datagrid options={{multiSelectable:true}}>\n            <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\n            <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\n            <TextField source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\n            <TextField source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\n            <TextField source=\"current_price\" label={\"当前价格\"}/>\n            <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <TextField source=\"score\" label={\"评分\"}/>\n            <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\"\n                                 sort={{ field: 'seq', order: 'ASC' }}>\n                <SingleFieldList>\n                    <ChipField source=\"content\" />\n                </SingleFieldList>\n            </ReferenceArrayField>\n            <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\n            <DateField source=\"updatedAt\" locales=\"zh-CN\" showTime label=\"更新时间\"/>\n            <RichTextField source=\"comment\" label={\"操作评价\"}/>\n            <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\n            <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\n            <LogQuickEditButton  />\n            <EditButton />\n        </Datagrid>\n    </ReferenceManyField>\n    </SimpleShowLayout>\n    </Show>\n);\n\nexport const SelectedStockShow = (props) => (\n    <Show title=\"选股详情\" actions={<ShowButton/>} {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"date\" label={\"选股日期\"}/>\n            <TextField source=\"strategy\" label={\"策略名称\"}/>\n            <TextField source=\"hyper_params\"label={\"超参数组合\"}/>\n            <TextField source=\"code\"label={\"代码\"}/>\n            <TextField source=\"name\"label={\"名称\"}/>\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <TextField source=\"good_bad\"label={\"gb策略值\"}/>\n            <TextField source=\"good\"label={\"当天good值\"}/>\n            <TextField source=\"bad\"label={\"当天bad值\"}/>\n            <TextField source=\"volatility\"label={\"波动率\"}/>\n            <TextField source=\"volat_price\"label={\"波动价格\"}/>\n            <TextField source=\"totalCapital\"label={\"流通市值\"}/>\n            <TextField source=\"vol50_change\"label={\"成交量变动\"}/>\n            <SelectField source=\"status\" label={\"状态\"} choices={StatusSelect} />\n            <DateField source=\"updatedAt\" locales=\"zh-CN\" showTime label=\"更新时间\"/>\n            <LogShow {...props}/>\n        </SimpleShowLayout>\n    </Show>\n);\n\nexport const SelectedStockEdit = (props) => (\n    <Edit title={\"编辑选中股票\"} actions={<EditActions/>} {...props}>\n        <SimpleForm>\n            <TextField source=\"id\"/>\n            <TextField source=\"date\" label={\"选股日期\"}/>\n            <TextField source=\"strategy\" label={\"策略名称\"}/>\n            <TextField source=\"hyper_params\"label={\"超参数组合\"}/>\n            <TextField source=\"code\"label={\"代码\"}/>\n            <TextField source=\"name\"label={\"名称\"}/>\n            <SelectInput source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <FormDataConsumer>\n                {({ formData, ...rest }) => {\n                    if (parseInt(formData.star) >= 3 && formData.status === Status.SELECTED) {\n                        formData.status = Status.CANDIDATED;\n                    }\n                    return (\n                        <SelectInput source=\"status\" label={\"状态\"} choices={StatusSelect} />\n                    )\n                }\n                }\n            </FormDataConsumer>\n\n            <ReferenceManyField\n                label=\"\"\n                reference=\"LogModel\"\n                target=\"selected_stock_id\"\n                sort={{ field: 'createdAt', order: 'ASC' }}\n            >\n                <Datagrid>\n                    <TextField source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\n                    <TextField source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\n                    <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\n                    <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\n                    <TextField source=\"current_price\" label={\"当前价格\"}/>\n                    <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\n                    <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\n                    <TextField source=\"score\" label={\"评分\"}/>\n                    <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\"\n                                         sort={{ field: 'seq', order: 'ASC' }}>\n                        <SingleFieldList>\n                            <ChipField source=\"content\" />\n                        </SingleFieldList>\n                    </ReferenceArrayField>\n                    <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\n                    <DateField source=\"updatedAt\" locales=\"zh-CN\" showTime label=\"更新时间\"/>\n                    <RichTextField source=\"comment\" label={\"操作评价\"}/>\n                    <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\n                    <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\n                    <EditButton />\n                </Datagrid>\n            </ReferenceManyField>\n        </SimpleForm>\n\n    </Edit>\n);\n\nexport const SelectedStockCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm>\n            <TextInput source=\"date\" label={\"选股日期\"}/>\n            <TextInput source=\"strategy\" label={\"策略名称\"}/>\n            <TextInput source=\"hyper_params\"label={\"超参数组合\"}/>\n            <TextInput source=\"code\"label={\"代码\"}/>\n            <TextInput source=\"name\"label={\"名称\"}/>\n            <SelectInput source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <TextInput source=\"good_bad\"label={\"gb策略值\"}/>\n            <TextInput source=\"good\"label={\"当天good值\"}/>\n            <TextInput source=\"bad\"label={\"当天bad值\"}/>\n            <TextInput source=\"volatility\"label={\"波动率\"}/>\n            <TextInput source=\"volat_price\"label={\"波动价格\"}/>\n            <TextInput source=\"totalCapital\"label={\"流通市值\"}/>\n            <TextInput source=\"vol50_change\"label={\"成交量变动\"}/>\n            <SelectInput source=\"status\" label={\"状态\"} choices={StatusSelect} />\n        </SimpleForm>\n    </Create>\n);\n","import Parse from 'parse/node';\nimport debug from 'debug';\nimport {LogType} from \"./LogModel\";\n\nexport class ReasonModel extends Parse.Object {\n    constructor() {\n        // Pass the ClassName to the Parse.Object constructor\n        super('ReasonModel');\n\n        this.seq = 0;//顺序\n        this.content = \"\";//理由\n        this.score = 0;//分数，-1 - 负面；1 - 正面；0 - 中性\n    }\n\n    findAll() {\n        var query = new Parse.Query(ReasonModel);\n        // query.notEqualTo(\"contentType\", 'img');\n        return query.find();\n    }\n\n    findByUrl(url) {\n        var query = new Parse.Query(ReasonModel);\n        query.equalTo(\"url\", url);\n        return query.find();\n    }\n\n    refreshDataFromParse() {\n      return {\n        'id': this.get(\"objectId\"),\n      }\n    }\n\n    deleteAll() {\n        this.findAll().then(function(news) {\n            // console.log(\"deleting \" + JSON.stringify(posts));\n            Parse.Object.destroyAll(news);\n        }, function(error) {\n            console.log(\"deleteAll error \" + JSON.stringify(error));\n        });\n    }\n\n    delete() {\n        this.destroy({\n            success: function(myObject) {\n                // The object was deleted from the Parse Cloud.\n                debug(\"Successfully deleted \" + myObject.content);\n            },\n            error: function(myObject, error) {\n                // The delete failed.\n                // error is a Parse.Error with an error code and message.\n                debug(\"deleted error:\" + error);\n            }\n        });\n    }\n\n    update() {\n        return this.save();\n    }\n\n}\n\nParse.Object.registerSubclass('ReasonModel', ReasonModel);\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport {\n    fetchEnd,\n    fetchStart,\n    required,\n    showNotification,\n    crudGetMatching,\n    Button,\n    SaveButton,\n    SimpleForm,\n    TextInput,\n    NumberInput,\n    LongTextInput,\n    CREATE,\n    REDUX_FORM_NAME\n} from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/Add';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport {dataProvider} from \"../models/data_provider_config\";\nimport {ReasonModel} from \"../models/ReasonModel\";\n\nclass ReasonQuickCreateButton extends Component {\n    state = {\n        error: false,\n        showDialog: false\n    };\n\n    handleClick = () => {\n        this.setState({ showDialog: true });\n    };\n\n    handleCloseClick = () => {\n        this.setState({ showDialog: false });\n    };\n\n    handleSaveClick = () => {\n        const { submit } = this.props;\n\n        // Trigger a submit of our custom quick create form\n        // This is needed because our modal action buttons are oustide the form\n        submit('reason-quick-create');\n    };\n\n    handleSubmit = values => {\n        const {\n            change,\n            crudGetMatching,\n            fetchStart,\n            fetchEnd,\n            showNotification\n        } = this.props;\n\n        // Dispatch an action letting react-admin know a API call is ongoing\n        fetchStart();\n\n        // As we want to know when the new post has been created in order to close the modal, we use the\n        // dataProvider directly\n        let reason = new ReasonModel();\n        reason.content = values.content;\n        reason.score = values.score;\n\n        dataProvider(CREATE, 'ReasonModel', { data: values })\n            .then(({ data }) => {\n                // Refresh the choices of the ReferenceInput to ensure our newly created post\n                // always appear, even after selecting another post\n                crudGetMatching(\n                    'ReasonModel',\n                    '',\n                    { page: 1, perPage: 100 },\n                    { field: 'content', order: 'ASC' },\n                    {}\n                );\n\n                // Update the main react-admin form (in this case, the comments creation form)\n                // change(REDUX_FORM_NAME, 'post_id', data.id);\n                this.setState({ showDialog: false });\n            })\n            .catch(error => {\n                showNotification(error.message, 'error');\n            })\n            .finally(() => {\n                // Dispatch an action letting react-admin know a API call has ended\n                fetchEnd();\n            });\n    };\n\n    render() {\n        const { showDialog } = this.state;\n        const { isSubmitting } = this.props;\n\n        return (\n            <Fragment>\n                <Button onClick={this.handleClick} label=\"ra.action.create\">\n                    <IconContentAdd />\n                </Button>\n                <Dialog\n                    fullWidth\n                    open={showDialog}\n                    onClose={this.handleCloseClick}\n                    aria-label=\"新建理由\"\n                >\n                    <DialogTitle>新建理由</DialogTitle>\n                    <DialogContent>\n                        <SimpleForm\n                            // We override the redux-form name to avoid collision with the react-admin main form\n                            form=\"reason-quick-create\"\n                            resource=\"ReasonModel\"\n                            // We override the redux-form onSubmit prop to handle the submission ourselves\n                            onSubmit={this.handleSubmit}\n                            // We want no toolbar at all as we have our modal actions\n                            toolbar={null}\n                        >\n                            <NumberInput source=\"seq\" label={\"顺序\"}/>\n                            <TextInput source=\"content\" label={\"理由\"}/>\n                            <NumberInput source=\"score\" label={\"分数\"}/>\n                        </SimpleForm>\n                    </DialogContent>\n                    <DialogActions>\n                        <SaveButton\n                            saving={isSubmitting}\n                            onClick={this.handleSaveClick}\n                        />\n                        <Button\n                            label=\"ra.action.cancel\"\n                            onClick={this.handleCloseClick}\n                        >\n                            <IconCancel />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isSubmitting: isSubmitting('reason-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n    change,\n    crudGetMatching,\n    fetchEnd,\n    fetchStart,\n    showNotification,\n    submit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    ReasonQuickCreateButton\n);\n","import React, {Fragment} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n    GET_MANY,\n    List,\n    Show,\n    SimpleShowLayout,\n    TextField,\n    DateField,\n    SelectField,\n    ImageField,\n    UrlField,\n    RichTextField,\n    SingleFieldList,\n    ReferenceField,\n    ChipField,\n    BooleanInput,\n    BooleanField,\n    ReferenceInput,\n    ReferenceArrayInput,\n    SelectArrayInput,\n    Filter,\n    Edit,\n    Create,\n    Datagrid,\n    EditButton,\n    SelectInput,\n    SimpleForm,\n    TextInput,\n    LongTextInput,\n    DateTimeInput,\n    NumberInput,\n    ReferenceArrayField,\n    CardActions,\n    ShowButton,\n    CreateButton,\n    DeleteButton,\n    RefreshButton,\n    SaveButton,\n    Toolbar,\n    FormDataConsumer,\n    showNotification\n} from 'react-admin';\nimport {SuggestionSelect, LogSelect, StarSelect, LogType, SuggestionType} from \"../models/LogModel\";\nimport ReasonQuickCreateButton from \"../component/ReasonQuickCreateButton\"\nimport RichTextInput from 'ra-input-rich-text';\nimport {dataProvider} from \"../models/data_provider_config\";\n\nconst cardActionStyle = {\n    zIndex: 2,\n    display: 'inline-block',\n    float: 'right',\n};\n\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\n    <CardActions style={cardActionStyle}>\n        <CreateButton basePath={basePath}/>\n        <RefreshButton/>\n    </CardActions>\n);\n\nconst LogFilter = (props) => (\n    <Filter {...props}>\n        <ReferenceInput label=\"待选股票\" source=\"selected_stock_id\" reference=\"SelectedStockModel\" alwaysOn>\n            <SelectInput optionText={selectStockOptionRenderer} />\n        </ReferenceInput>\n    </Filter>\n);\n\nconst ReasonReferenceInput = props => (\n    <Fragment>\n        <ReferenceArrayInput {...props}>\n            <SelectArrayInput optionText={reasonOptionRenderer} options={{ fullWidth: true }}\n            />\n        </ReferenceArrayInput>\n\n        <ReasonQuickCreateButton />\n    </Fragment>\n);\n\nconst selectStockOptionRenderer = stock => `${stock.code} - ${stock.name}`;\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\n//返回到选中股票的详情页面\nconst redirect = (basePath, id, data) => `/SelectedStockModel/${data.selected_stock_id}/edit`;\n\nexport const LogList = (props) => (\n    <List {...props} title=\"日志列表\" filters={<LogFilter />} sort={{field: 'crawlAt', order: 'DESC'}} perPage={25} actions={<ListActions/>}>\n        <Datagrid options={{multiSelectable:true}} bodyOptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}} headerOptions={{adjustForCheckbox:true}} rowOptions={{selectable: true}}>\n            {/*<TextField source=\"id\"/>*/}\n            <ReferenceField label=\"股票\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\n                <TextField source={selectStockOptionRenderer} />\n            </ReferenceField>\n            <TextField source=\"suggested_low_price\" label={\"建议较低价格\"}/>\n            <TextField source=\"suggested_high_price\" label={\"建议较高价格\"}/>\n            <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\n            <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\n            <TextField source=\"current_price\" label={\"当前价格\"}/>\n            <TextField source=\"current_position\" label={\"当前仓位\"}/>\n            <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <TextField source=\"score\" label={\"评分\"}/>\n            <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\">\n                <SingleFieldList>\n                    <ChipField source=\"content\" />\n                </SingleFieldList>\n            </ReferenceArrayField>\n            <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\n            <RichTextField source=\"comment\" label={\"操作评价\"}/>\n            <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\n            <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\n            <DeleteButton/>\n            <EditButton/>\n            <ShowButton/>\n        </Datagrid>\n    </List>\n);\n\nexport const LogShow = (props) => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <ReferenceField label=\"股票\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\n                <TextField source={selectStockOptionRenderer} />\n            </ReferenceField>\n            <TextField source=\"suggested_low_price\" label={\"建议较低价格\"}/>\n            <TextField source=\"suggested_high_price\" label={\"建议较高价格\"}/>\n            <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\n            <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\n            <TextField source=\"current_price\" label={\"当前价格\"}/>\n            <TextField source=\"current_position\" label={\"当前仓位\"}/>\n            <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\n            <TextField source=\"score\" label={\"评分\"}/>\n            <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\">\n                <SingleFieldList>\n                    <ChipField source=\"content\" />\n                </SingleFieldList>\n            </ReferenceArrayField>\n            <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\n            <RichTextField source=\"comment\" label={\"操作评价\"}/>\n            <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\n            <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\n        </SimpleShowLayout>\n    </Show>\n);\n\nexport const LogEdit = (props) => (\n    <Edit title=\"日志编辑\" {...props}>\n        <SimpleForm redirect={redirect}>\n            <TextField source=\"id\"/>\n            <ReferenceInput label=\"待选股\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\n                <SelectInput optionText={selectStockOptionRenderer} />\n            </ReferenceInput>\n            <NumberInput source=\"suggested_low_price\"  label={\"建议较低价格\"}/>\n            <NumberInput source=\"suggested_high_price\" label={\"建议较高价格\"}/>\n            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\n            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\n            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\n            <NumberInput source=\"current_position\" label={\"当前仓位\"}/>\n            <FormDataConsumer>\n                {({ formData, ...rest }) => {\n                    // console.log(\"formData.reason_ids: \" + JSON.stringify(formData.reason_ids));\n                    dataProvider(GET_MANY, 'ReasonModel', { ids: formData.reason_ids})\n                        .then((list) => {\n                            // console.log(\"GET_LIST: \" + JSON.stringify(list));\n                            let robjs = new ReasonCollection(...list.data);\n                            let count = robjs.sum(\"score\");\n                            // console.log(\"count: \" + count);\n                            formData.score = count;\n\n                            let value = StarSelect.find(x => ((x.id === count.toString()) || (x.id === \"6\" && count > 5) || (x.id === \"-1\" && count < 0)));\n                            // console.log(\"value: \" + value);\n                            let star = value?value.id: \"\";\n                            // console.log(\"star: \" + star);\n                            formData.star = star;\n\n                            if (!formData.logType || formData.logType === LogType.CANDIDATE || formData.logType === LogType.UNCANDIDATE) {\n                                if (count >= 3) {\n                                    formData.suggested_action = SuggestionType.BUY;\n                                    formData.logType = LogType.CANDIDATE;\n                                } else {\n                                    formData.suggested_action = SuggestionType.NONE;\n                                    formData.logType = LogType.UNCANDIDATE;\n                                }\n                            }\n                        })\n                        .catch((e) => {\n                            showNotification('Error: get reasons failed', 'warning')\n                        });\n                    return (\n                        <Fragment>\n                            <SelectInput source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\n                            <SelectInput source=\"star\" label={\"评级\"}\n                                         choices={StarSelect}/>\n                            <NumberInput source=\"score\" label={\"评分\"}/>\n                        </Fragment>\n                    )\n                }\n                }\n            </FormDataConsumer>\n            <ReasonReferenceInput label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\" perPage={10000}\n                                 sort={{ field: 'seq', order: 'ASC' }}/>\n            <SelectInput source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\n            <RichTextInput source=\"comment\" label={\"操作评价\"}/>\n            <BooleanInput source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\n            <TextField source=\"commentTime\" label=\"操作评价时间\" options={{ format: 'YYYY-MM-dd, HH:mm:ss', ampm: false, clearable: true }} />\n        </SimpleForm>\n    </Edit>\n);\n\nclass ReasonCollection extends Array {\n    sum(key) {\n        return this.reduce((a, b) => a + (b[key] || 0), 0);\n    }\n}\n\nexport const LogCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm redirect={redirect}>\n            <TextField source=\"id\" />\n            <ReferenceInput label=\"待选股\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\n                <SelectInput optionText={selectStockOptionRenderer} />\n            </ReferenceInput>\n            <NumberInput source=\"suggested_low_price\"  label={\"建议较低价格\"}/>\n            <NumberInput source=\"suggested_high_price\" label={\"建议较高价格\"}/>\n            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\n            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\n            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\n            <NumberInput source=\"current_position\" label={\"当前仓位\"}/>\n\n            <FormDataConsumer>\n                {({ formData, ...rest }) => {\n                    // console.log(\"formData.reason_ids: \" + JSON.stringify(formData.reason_ids));\n                    dataProvider(GET_MANY, 'ReasonModel', { ids: formData.reason_ids})\n                        .then((list) => {\n                            // console.log(\"GET_LIST: \" + JSON.stringify(list));\n                            let robjs = new ReasonCollection(...list.data);\n                            let count = robjs.sum(\"score\");\n                            // console.log(\"count: \" + count);\n                            formData.score = count;\n\n                            let value = StarSelect.find(x => ((x.id === count.toString()) || (x.id === \"6\" && count > 5) || (x.id === \"-1\" && count < 0)));\n                            // console.log(\"value: \" + value);\n                            let star = value?value.id: \"\";\n                            // console.log(\"star: \" + star);\n                            formData.star = star;\n\n                            if (!formData.logType || formData.logType === LogType.CANDIDATE || formData.logType === LogType.UNCANDIDATE) {\n                                if (count > 3) {\n                                    formData.suggested_action = SuggestionType.BUY;\n                                    formData.logType = LogType.CANDIDATE;\n                                } else {\n                                    formData.suggested_action = SuggestionType.NONE;\n                                    formData.logType = LogType.UNCANDIDATE;\n                                }\n                            }\n                        })\n                        .catch((e) => {\n                            showNotification('Error: get reasons failed', 'warning')\n                        });\n                    return (\n                        <Fragment>\n                            <SelectInput source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\n                            <SelectInput source=\"star\" label={\"评级\"}\n                                         choices={StarSelect}/>\n                            <NumberInput source=\"score\" label={\"评分\"}/>\n                        </Fragment>\n                    )\n                }\n                }\n            </FormDataConsumer>\n            <ReasonReferenceInput label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\" perPage={10000}\n                                 sort={{ field: 'seq', order: 'ASC' }} />\n            <SelectInput source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\n            <RichTextInput source=\"comment\" label={\"操作评价\"}/>\n            <BooleanInput source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\n            <TextField source=\"commentTime\" label=\"操作评价时间\" options={{ format: 'YYYY-MM-dd, HH:mm:ss', ampm: false, clearable: true }} />\n        </SimpleForm>\n    </Create>\n);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n    List,\n    Show,\n    SimpleShowLayout,\n    TextField,\n    DateField,\n    SelectField,\n    ImageField,\n    UrlField,\n    RichTextField,\n    SingleFieldList,\n    ReferenceField,\n    ReferenceInput,\n    ReferenceArrayInput,\n    SelectArrayInput,\n    Filter,\n    Edit,\n    Create,\n    Datagrid,\n    EditButton,\n    SelectInput,\n    SimpleForm,\n    TextInput,\n    NumberInput,\n    ReferenceArrayField,\n    CardActions,\n    ShowButton,\n    CreateButton,\n    DeleteButton,\n    RefreshButton,\n    SaveButton,\n    Toolbar,\n    showNotification\n} from 'react-admin';\n\nconst cardActionStyle = {\n    zIndex: 2,\n    display: 'inline-block',\n    float: 'right',\n};\n\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\n    <CardActions style={cardActionStyle}>\n        <CreateButton basePath={basePath}/>\n        <RefreshButton/>\n    </CardActions>\n);\n\nconst ReasonFilter = (props) => (\n    <Filter {...props}>\n\n    </Filter>\n);\n\nconst CreateToolbar = props => (\n    <Toolbar {...props} >\n        <SaveButton\n            label=\"保存\"\n            redirect=\"list\"\n            submitOnEnter={true}\n        />\n        <SaveButton\n            label=\"保存并新增\"\n            redirect={false}\n            submitOnEnter={false}\n            variant=\"flat\"\n        />\n    </Toolbar>\n);\n\nexport const ReasonList = (props) => (\n    <List {...props} title=\"日志列表\" filters={<ReasonFilter />} sort={{field: 'seq', order: 'ASC'}} perPage={50} actions={<ListActions/>}>\n        <Datagrid options={{multiSelectable:true}} bodyOptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}} headerOptions={{adjustForCheckbox:true}} rowOptions={{selectable: true}}>\n            {/*<TextField source=\"id\"/>*/}\n            <TextField source=\"seq\" label={\"顺序\"}/>\n            <TextField source=\"content\" label={\"理由\"}/>\n            <TextField source=\"score\" label={\"分数\"}/>\n            <DeleteButton/>\n            <EditButton/>\n            <ShowButton/>\n        </Datagrid>\n    </List>\n);\n\nexport const ReasonShow = (props) => (\n    <Show {...props}>\n        <SimpleShowLayout>\n            <TextField source=\"seq\" label={\"顺序\"}/>\n            <TextField source=\"content\" label={\"理由\"}/>\n            <TextField source=\"score\" label={\"分数\"}/>\n        </SimpleShowLayout>\n    </Show>\n);\n\nexport const ReasonEdit = (props) => (\n    <Edit title=\"日志编辑\" {...props}>\n        <SimpleForm toolbar={<CreateToolbar />} redirect=\"List\">\n            <TextField source=\"id\"/>\n            <NumberInput source=\"seq\" label={\"顺序\"} step={10}/>\n            <TextInput source=\"content\" label={\"理由\"}/>\n            <NumberInput source=\"score\" label={\"分数\"}/>\n        </SimpleForm>\n    </Edit>\n);\n\nexport const ReasonCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm toolbar={<CreateToolbar />} redirect=\"List\">\n            <TextField source=\"id\" />\n            <NumberInput source=\"seq\" label={\"顺序\"} step={10}/>\n            <TextInput source=\"content\" label={\"理由\"}/>\n            <NumberInput source=\"score\" label={\"分数\"}/>\n        </SimpleForm>\n    </Create>\n);\n","import axios from 'axios';\n\nlet url = 'http://win10:8000';\n\nconst instance = axios.create({\n    baseURL: url\n});\n\n// instance.interceptors.request.use(\n//     async config => {\n//         const token = await AsyncStorage.getItem('token');\n//         const userKey = await AsyncStorage.getItem('userKey');\n//         const time = Date.now();\n//         const signature = md5.hex_md5(`${userKey}:${token}:${time}`);\n//\n//         if (token && userKey) {\n//             config.headers.token = token;\n//             config.headers.time = time;\n//             config.headers.signature = signature;\n//         }\n//         return config;\n//     },\n//     err => {\n//         return Promise.reject(err);\n//     }\n// );\n\nexport default instance;\n","import * as React from \"react\";\n\nexport const AxisPriceList = ({ record }) => {\n    // console.log(\"record: \" + JSON.stringify(record));\n    let axisPrice = (record.high + record.low + record.close)/3;\n    let resistPrice1 = 2 * axisPrice - record.low;\n    let resistPrice2 = axisPrice + record.high - record.low;\n    let resistPrice3 = resistPrice1 + record.high - record.low;\n    let supportPrice1 = 2 * axisPrice - record.high;\n    let supportPrice2 = axisPrice - (record.high - record.low);\n    let supportPrice3 = supportPrice1 - (record.high - record.low);\n\n    let upPrice = Math.max((1 + record.volatility) * record.close, resistPrice2);\n    let downPrice = Math.max((1 - record.volatility) * record.close, supportPrice1);\n    let suggestBuyPrice1 = Math.min((1 - record.volatility) * record.close, supportPrice2);\n    let suggestBuyPrice2 = Math.min((1 + record.volatility) * record.close, resistPrice1);\n\n    return (\n        <ul>\n            <li key=\"upPrice\">{\"止盈价格：\" + upPrice.toFixed(2)}</li>\n            <li key=\"downPrice\">{\"止损价格：\" + downPrice.toFixed(2)}</li>\n            <li key=\"suggestBuyPrice2\">{\"建议买入价格(高)：\" + suggestBuyPrice2.toFixed(2)}</li>\n            <li key=\"suggestBuyPrice1\">{\"建议买入价格(低)：\" + suggestBuyPrice1.toFixed(2)}</li>\n            <li key=\"resistPrice3\">{\"阻力3：\" + resistPrice3.toFixed(2)}</li>\n            <li key=\"resistPrice2\">{\"阻力2：\" + resistPrice2.toFixed(2)}</li>\n            <li key=\"resistPrice1\">{\"阻力1：\" + resistPrice1.toFixed(2)}</li>\n            <li key=\"axisPrice\">{\"轴 心 ：\" + axisPrice.toFixed(2)}</li>\n            <li key=\"supportPrice1\">{\"支撑1：\" + supportPrice1.toFixed(2)}</li>\n            <li key=\"supportPrice2\">{\"支撑2：\" + supportPrice2.toFixed(2)}</li>\n            <li key=\"supportPrice3\">{\"支撑3：\" + supportPrice3.toFixed(2)}</li>\n        </ul>\n    );\n}","import * as React from 'react';\nimport { useMemo, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport CustomerIcon from '@material-ui/icons/PersonAdd';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport {useTranslate, useQueryWithStore, DateInput} from 'react-admin';\n\nimport moment from \"moment\";\nimport {Status} from \"../../models/SelectedStockModel\";\nimport LogQuickEditButton from \"../../component/LogQuickEditButton\";\nimport {AxisPriceList} from \"../../component/AxisPriceList\";\n\nconst useStyles = makeStyles({\n    main: {\n        flex: '1',\n        marginLeft: '1em',\n        marginTop: 20,\n    },\n    card: {\n        padding: '16px 0',\n        overflow: 'inherit',\n        textAlign: 'right',\n    },\n    title: {\n        padding: '0 16px',\n    },\n    value: {\n        padding: '0 16px',\n        minHeight: 48,\n    },\n});\n\nconst SelectedStocksTable = () => {\n    const classes = useStyles();\n    const [date, setDate] = useState(moment().format('YYYY-MM-DD'));\n    const translate = useTranslate();\n    const aMonthAgo = useMemo(() => {\n        const date = new Date();\n        date.setDate(date.getDate() - 30);\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n    }, []);\n\n    const { loaded, data: stocks } = useQueryWithStore({\n        type: 'getList',\n        resource: 'SelectedStockModel',\n        payload: {\n            filter: {\n                status: Status.CANDIDATED,\n            },\n            sort: { field: 'date', order: 'DESC' },\n            pagination: { page: 1, perPage: 5 },\n        },\n    });\n\n    if (!loaded) return null;\n\n    return (\n        <div className={classes.main}>\n            <Card className={classes.card}>\n                <Divider />\n                <List>\n                    {stocks\n                        ? stocks.map((stock) => (\n                            <ListItem\n                                key={stock.id}\n                            >\n                                <ListItem>\n                                    {stock.date}\n                                    -{stock.code}\n                                    -{stock.name}\n                                </ListItem>\n                                <ListItemText\n                                    primary={stock.star}\n                                />\n                                <ListItem>\n                                    <AxisPriceList record={stock}/>\n                                </ListItem>\n                            </ListItem>\n                        ))\n                        : null}\n                </List>\n            </Card>\n        </div>\n    );\n};\n\nexport default SelectedStocksTable;\n","import React, {useState, useCallback} from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Title } from 'react-admin';\nimport {stockApi} from '../../models/api'\nimport SelectedStocksTable from \"./SelectedStocks\";\n\nconst styles = {\n    flex: { display: 'flex' },\n    flexColumn: { display: 'flex', flexDirection: 'column' },\n    leftCol: { flex: 1, marginRight: '1em' },\n    rightCol: { flex: 1, marginLeft: '1em' },\n    singleCol: { marginTop: '2em', marginBottom: '2em' },\n};\n\nexport default () => {\n\n\n    return (\n        <div style={styles.flex}>\n            <div style={styles.leftCol}>\n                <div style={styles.singleCol}>\n                    <SelectedStocksTable/>\n                </div>\n            </div>\n            <div style={styles.rightCol}>\n                <div style={styles.singleCol}>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Admin, Resource } from 'react-admin';\n\nimport { SelectedStockList, SelectedStockShow, SelectedStockEdit, SelectedStockCreate } from './screens/SelectedStockList';\nimport { LogList, LogShow, LogEdit, LogCreate } from './screens/LogList';\nimport { ReasonList, ReasonShow, ReasonEdit, ReasonCreate } from './screens/ReasonList';\nimport {dataProvider, authProvider} from \"./models/data_provider_config\";\nimport Dashboard from './screens/dashboard/Dashboard';\n\nconst App = () => (\n    <Admin\n        title=\"Stock Log - 交易记录\"\n        dashboard={Dashboard}\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n    >\n        <Resource name=\"SelectedStockModel\" options={{ label: \"选股列表\" }} list={SelectedStockList} show={SelectedStockShow} edit={SelectedStockEdit} create={SelectedStockCreate}  />\n        <Resource name=\"LogModel\" options={{ label: \"日志列表\" }} list={LogList} show={LogShow} edit={LogEdit} create={LogCreate}  />\n        <Resource name=\"ReasonModel\" options={{ label: \"理由列表\" }} list={ReasonList} show={ReasonShow} edit={ReasonEdit} create={ReasonCreate}  />\n    </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}