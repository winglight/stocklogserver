{"version":3,"sources":["models/SelectedStockModel.js","models/LogModel.js","models/data_provider_config.js","component/LogQuickCreateButton.js","component/LogQuickEditButton.js","component/AddToGroupButton.js","screens/SelectedStockList.js","models/ReasonModel.js","component/ReasonQuickCreateButton.js","screens/LogList.js","screens/ReasonList.js","models/api.js","screens/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Status","StatusSelect","id","name","StrategyCategory","HyperParams","SelectedStockModel","status","this","destroy","success","myObject","debug","error","set","save","Parse","Query","find","get","date","strategy","hyper_params","code","query","equalTo","Object","registerSubclass","LogType","StarSelect","SuggestionType","LogSelect","SuggestionSelect","LogModel","selected_stock_id","suggested_low_price","suggested_high_price","expected_low_price","expected_high_price","current_price","current_position","suggested_action","star","score","reason_ids","logType","comment","isSuccessful","url","findAll","then","news","destroyAll","console","log","JSON","stringify","findById","stock","parseConfig","URL","JAVASCRIPT_KEY","APP_ID","dataProvider","ParseClient","authProvider","ParseAuth","reasonOptionRenderer","reason","content","LogQuickCreateButton","state","showDialog","handleClick","setState","handleCloseClick","handleSaveClick","submit","props","handleSubmit","values","crudGetMatching","change","fetchStart","fetchEnd","showNotification","CREATE","data","page","perPage","field","order","catch","message","finally","isSubmitting","logTypeName","x","onClick","label","fullWidth","open","onClose","aria-label","SimpleForm","form","resource","onSubmit","toolbar","NumberInput","source","ReferenceArrayInput","reference","sort","filter","SelectArrayInput","optionText","options","fullWidthInput","SelectInput","choices","defaultValue","SaveButton","saving","Component","mapDispatchToProps","connect","LogQuickEditButton","logObj","record","UPDATE","previousData","key","AddToGroupButton","selectedIds","GET_ONE","response","axios","params","err","cardActionStyle","zIndex","display","float","StrategyField","res","getCatName","ListPagination","Pagination","rowsPerPageOptions","AxisPriceField","axisPrice","high","low","close","resistPrice1","resistPrice2","resistPrice3","supportPrice1","supportPrice2","supportPrice3","upPrice","Math","max","volatility","downPrice","suggestBuyPrice1","min","suggestBuyPrice2","toFixed","HyperParamsField","hps","split","map","item","index","RedTextField","style","color","ListActions","filters","displayedFilters","filterValues","basePath","showFilter","CardActions","CreateButton","RefreshButton","BulkActionButtons","BulkDeleteButton","ShowActions","component","Link","to","pathname","EditActions","ShowButton","ListFilter","Filter","filterdefaultvalues","alwaysOn","DateInput","moment","format","TextInput","SelectedStockList","List","title","pagination","actions","bulkActionButtons","Datagrid","multiSelectable","bodyoptions","stripedRows","showRowHover","displayRowCheckbox","headeroptions","adjustForCheckbox","rowoptions","selectable","rowClick","expand","TextField","SelectField","NumberField","maximumFractionDigits","EditButton","LogShow","Show","SimpleShowLayout","ReferenceManyField","target","ReferenceArrayField","SingleFieldList","ChipField","DateField","locales","showTime","RichTextField","BooleanField","valueLabelTrue","valueLabelFalse","SelectedStockShow","SelectedStockEdit","Edit","FormDataConsumer","formData","parseInt","SelectedStockCreate","Create","ReasonModel","seq","ReasonQuickCreateButton","LogFilter","ReferenceInput","selectStockOptionRenderer","ReasonReferenceInput","redirect","LogList","bodyOptions","headerOptions","rowOptions","ReferenceField","DeleteButton","LogEdit","GET_MANY","ids","list","count","ReasonCollection","sum","value","toString","e","BooleanInput","ampm","clearable","reduce","a","b","Array","LogCreate","ReasonFilter","CreateToolbar","Toolbar","submitOnEnter","variant","ReasonList","ReasonShow","ReasonEdit","step","ReasonCreate","create","baseURL","styles","flex","flexColumn","flexDirection","leftCol","marginRight","rightCol","marginLeft","singleCol","marginTop","marginBottom","App","Admin","dashboard","Dashboard","Resource","show","edit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6b890c1c.chunk.js","sourcesContent":["import Parse from 'parse/node';\r\nimport debug from 'debug';\r\nimport moment from 'moment';\r\n\r\nexport const Status = {\r\n    SELECTED: \"0\",\r\n    CANDIDATED: \"1\",\r\n    POSITIONED: \"2\",\r\n    SOLDOUT: \"3\",\r\n};\r\nexport const StatusSelect = [\r\n    { id: \"0\", name: '海选' },\r\n    { id: \"1\", name: '精选' },\r\n    { id: \"2\", name: '持仓' },\r\n    { id: \"3\", name: '清仓' },\r\n];\r\nexport const StrategyCategory = [\r\n    { id: 'qa_gb_ranjl', name: 'QA版GB价量策略' },\r\n    { id: 'good_bad', name: 'gb策略' },\r\n    { id: 'gb_volat_true', name: '波动率反序' },\r\n    { id: 'gb_volat_false', name: '波动率正序' },\r\n    { id: 'con_gb_prev_3', name: '连续good=3策略(前)' },\r\n    { id: 'con_gb_3', name: '连续good=3策略' },\r\n    { id: 'con_good', name: '连续good策略' },\r\n    { id: 'ema8_ema20_cross', name: 'EMA突破策略' },\r\n    { id: '0', name: '---------' },\r\n    { id: 'gb_volat_false', name: '波动率正序' },\r\n];\r\nexport const HyperParams = [\r\n    { id: \"1,4,6,90,3\", name:\"1,4,6,90,3\"},\r\n    { id: \"5,3,6,40,5\", name:\"5,3,6,40,5\"},\r\n    { id: \"10,3,5,40,5\", name:\"10,3,5,40,5\"},\r\n    { id: \"5,3,7,40,5\", name:\"5,3,7,40,5\"},\r\n    { id: \"10,2,7,40,4\", name:\"10,2,7,40,4\"},\r\n    { id: \"10,2,6,40,5\", name:\"10,2,6,40,5\"},\r\n    {id: \"0\", name:\"----------\"},\r\n    { id: \"5,1,5,50,4\", name:\"5,1,5,50,4\"},\r\n    { id: \"7,1,5,50,4\", name:\"7,1,5,50,4\"},\r\n    { id: \"7,2,5,60,4\", name:\"7,2,5,60,4\"},\r\n];\r\n// export const StrategyCategory = [\r\n//     { id: 'gb_volat_false', name: '波动率正序' },\r\n//     { id: 'good_bad', name: 'gb策略' },\r\n//     { id: 'con_gb_3', name: '连续good=3策略' },\r\n//     { id: 'gb_volat_true', name: '波动率反序' },\r\n//     { id: 'con_good', name: '连续good策略' },\r\n// ];\r\n// export const HyperParams = [\r\n//\r\n//     { id: \"5,1,5,50,4\", name:\"5,1,5,50,4\"},\r\n//     { id: \"5,1,6,50,4\", name:\"5,1,6,50,4\"},\r\n//     { id: \"5,2,7,40,5\", name:\"5,2,7,40,5\"},\r\n//     { id: \"10,2,6,40,4\", name:\"10,2,6,40,4\"},\r\n//     { id: \"10,2,7,50,4\", name:\"10,2,7,50,4\"},\r\n//     { id: \"10,2,7,40,4\", name:\"10,2,7,40,4\"},\r\n// ];\r\n\r\nexport class SelectedStockModel extends Parse.Object {\r\n    constructor() {\r\n        // Pass the ClassName to the Parse.Object constructor\r\n        super('SelectedStockModel');\r\n\r\n        // this.date;\r\n        // this.strategy;//策略名称\r\n        // this.hyper_params;//超参数组合\r\n        // this.code;\r\n        // this.name = \"\";\r\n        // this.good_bad;//gb策略值\r\n        // this.good10_count;//窗口期内good值合计\r\n        // this.bad10_count;//窗口期内bad值合计\r\n        // this.good;//当天good值\r\n        // this.bad;//当天bad值\r\n        // this.con_good;//截止当天连续good值为1的合计\r\n        // this.volatility;//波动率\r\n        // this.volat_price;//波动价格\r\n        // this.totalCapital;//流通市值\r\n        // this.price365_max;//过去365个交易日价格最大值\r\n        // this.price50_max;//过去50个交易日价格平均值变更比例\r\n        // this.price365_change;//过去365个交易日价格平均值变更比例\r\n        // this.price50_change;//过去50个交易日价格平均值变更比例\r\n        // this.vol50_change;//过去50个交易日成交量平均值变更比例\r\n        // this.return_rate;//回报率\r\n        // this.star = \"D\";//评级：A - 建议购买；B - 待观察；C - 不建议购买\r\n        this.status = Status.SELECTED;\r\n    }\r\n\r\n    static findAll() {\r\n        var query = new Parse.Query(SelectedStockModel);\r\n        // query.notEqualTo(\"url\", '');\r\n        return query.find();\r\n    }\r\n\r\n    static findById(id) {\r\n        var query = new Parse.Query(SelectedStockModel);\r\n        // query.notEqualTo(\"url\", '');\r\n        return query.get(id);\r\n    }\r\n\r\n    static findByDateNSHCode(date, strategy, hyper_params, code) {\r\n        var query = new Parse.Query(SelectedStockModel);\r\n        query.equalTo(\"date\", date);\r\n        query.equalTo(\"strategy\", strategy);\r\n        query.equalTo(\"hyper_params\", hyper_params);\r\n        query.equalTo(\"code\", code);\r\n        return query.find();\r\n    }\r\n\r\n    delete() {\r\n        this.destroy({\r\n            success: function(myObject) {\r\n                // The object was deleted from the Parse Cloud.\r\n                debug(\"Successfully deleted \" + myObject.name);\r\n            },\r\n            error: function(myObject, error) {\r\n                // The delete failed.\r\n                // error is a Parse.Error with an error code and message.\r\n                debug(\"deleted error:\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    update() {\r\n        this.set(\"name\", this.name);\r\n\r\n        return this.save();\r\n    }\r\n\r\n}\r\n\r\nParse.Object.registerSubclass('SelectedStockModel', SelectedStockModel);","import Parse from 'parse/node';\r\nimport debug from 'debug';\r\nimport {SelectedStockModel, Status} from \"./SelectedStockModel\";\r\n\r\n//log类型\r\nexport const LogType = {\r\n  UNCANDIDATE: \"uncandidate\",//未选中\r\n  CANDIDATE: \"candidate\",//选中\r\n  BID: \"bid\",//竞价\r\n  PRICING: \"price\",//更新止盈止损价格\r\n  ORDER: \"order\",//下单\r\n  HOLD: \"hold\",//持有\r\n  SELL: \"sell\",//卖出\r\n  TRANSFER_OUT: \"out\",//现金转出\r\n  TRANSFER_IN: \"in\",//现金转入\r\n};\r\n//评级\r\nexport const StarSelect = [\r\n    { id: \"6\", name: 'A+（>5）' },\r\n    { id: \"5\", name: 'A（5）' },\r\n    { id: \"4\", name: 'A-（4）' },\r\n    { id: \"3\", name: 'B+（3）' },\r\n    { id: \"2\", name: 'B（2）' },\r\n    { id: \"1\", name: 'B-（1）' },\r\n    { id: \"0\", name: 'C（0）' },\r\n    { id: \"-1\", name: 'D（<0）' },\r\n];\r\n\r\n//建议类型\r\nexport const SuggestionType = {\r\n  NONE: \"none\",//无\r\n  BUY: \"buy\",//买入\r\n  HOLD: \"hold\",//持有\r\n  SELL: \"sell\",//卖出\r\n};\r\n\r\nexport const LogSelect = [\r\n    { id: \"uncandidate\", name: '未选中' },\r\n    { id: \"candidate\", name: '选中' },\r\n    { id: \"bid\", name: '竞价' },\r\n    { id: \"price\", name: '更新止盈止损价格' },\r\n    { id: \"order\", name: '下单' },\r\n    { id: \"hold\", name: '持有' },\r\n    { id: \"sell\", name: '卖出' },\r\n];\r\n\r\nexport const SuggestionSelect = [\r\n    { id: \"none\", name: '无' },\r\n    { id: \"buy\", name: '买入' },\r\n    { id: \"hold\", name: '持有' },\r\n    { id: \"sell\", name: '卖出' },\r\n];\r\n\r\nexport default class LogModel extends Parse.Object {\r\n    constructor() {\r\n        // Pass the ClassName to the Parse.Object constructor\r\n        super('LogModel');\r\n\r\n        this.selected_stock_id=\"\";//父对象：选中股票id\r\n        this.suggested_low_price = 0;//建议较低价格\r\n        this.suggested_high_price = 0;//建议较高价格\r\n        this.expected_low_price = 0;//止损价格\r\n        this.expected_high_price = 0;//止盈价格\r\n        this.current_price = 0;//当前价格\r\n        this.current_position = 0;//当前仓位（占比）\r\n        this.suggested_action = SuggestionType.NONE;//推荐动作\r\n        this.star = \"D\";//评级：A - 建议购买；B - 待观察；C - 不建议购买\r\n        this.score = 0;//评分——来自理由的综合得分\r\n        this.reason_ids = [];//理由;id数组\r\n        this.logType = LogType.UNCANDIDATE;//log类型\r\n        this.comment = \"\";//操作评价\r\n        this.isSuccessful = false;//操作是否满意\r\n        // this.commentTime = \"\";//操作评价时间\r\n    }\r\n\r\n    findAll() {\r\n        var query = new Parse.Query(LogModel);\r\n        // query.notEqualTo(\"contentType\", 'img');\r\n        return query.find();\r\n    }\r\n\r\n    findByUrl(url) {\r\n        var query = new Parse.Query(LogModel);\r\n        query.equalTo(\"url\", url);\r\n        return query.find();\r\n    }\r\n\r\n    refreshDataFromParse() {\r\n      return {\r\n        'id': this.get(\"objectId\"),\r\n      }\r\n    }\r\n\r\n    deleteAll() {\r\n        this.findAll().then(function(news) {\r\n            // console.log(\"deleting \" + JSON.stringify(posts));\r\n            Parse.Object.destroyAll(news);\r\n        }, function(error) {\r\n            console.log(\"deleteAll error \" + JSON.stringify(error));\r\n        });\r\n    }\r\n\r\n    delete() {\r\n        this.destroy({\r\n            success: function(myObject) {\r\n                // The object was deleted from the Parse Cloud.\r\n                debug(\"Successfully deleted \" + myObject.name);\r\n            },\r\n            error: function(myObject, error) {\r\n                // The delete failed.\r\n                // error is a Parse.Error with an error code and message.\r\n                debug(\"deleted error:\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    save() {\r\n        if(!this.id && this.logType === LogType.CANDIDATE){\r\n            SelectedStockModel.findById(this.selected_stock_id)\r\n                .then((stock) => {\r\n                    // The object was retrieved successfully.\r\n                    stock.status = Status.CANDIDATED\r\n                    stock.save();\r\n                }, (error) => {\r\n                    // The object was not retrieved successfully.\r\n                    // error is a Parse.Error with an error code and message.\r\n                });\r\n        }\r\n        return this.save();\r\n    }\r\n\r\n}\r\n\r\nParse.Object.registerSubclass('LogModel', LogModel);\r\n","import {ParseAuth, ParseClient} from \"ra-data-parse\";\r\n\r\nconst parseConfig = {\r\n    URL: '/parse',\r\n    JAVASCRIPT_KEY: '',\r\n    APP_ID: 'stocklog'\r\n}\r\n\r\nexport const dataProvider = ParseClient(parseConfig);\r\n// Pass it as the second parameter after the base URL.\r\nexport const authProvider = ParseAuth(parseConfig);","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { change, submit, isSubmitting } from 'redux-form';\r\nimport {\r\n    fetchEnd,\r\n    fetchStart,\r\n    required,\r\n    showNotification,\r\n    crudGetMatching,\r\n    Button,\r\n    SaveButton,\r\n    SimpleForm,\r\n    TextInput,\r\n    NumberInput,\r\n    LongTextInput,\r\n    ReferenceArrayInput,\r\n    SelectArrayInput,\r\n    SelectInput,\r\n    CREATE,\r\n    REDUX_FORM_NAME\r\n} from 'react-admin';\r\nimport IconContentAdd from '@material-ui/icons/Add';\r\nimport IconCancel from '@material-ui/icons/Cancel';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport {dataProvider} from \"../models/data_provider_config\";\r\nimport LogModel from \"../models/LogModel\";\r\nimport {LogSelect, StarSelect, SuggestionSelect} from \"../models/LogModel\";\r\n\r\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\r\n\r\nclass LogQuickCreateButton extends Component {\r\n    state = {\r\n        selected_stock_id: \"\",\r\n        logType: \"\",\r\n        error: false,\r\n        showDialog: false\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({ showDialog: true });\r\n    };\r\n\r\n    handleCloseClick = () => {\r\n        this.setState({ showDialog: false });\r\n    };\r\n\r\n    handleSaveClick = () => {\r\n        const { submit } = this.props;\r\n\r\n        // Trigger a submit of our custom quick create form\r\n        // This is needed because our modal action buttons are oustide the form\r\n        submit('log-quick-create');\r\n    };\r\n\r\n    handleSubmit = values => {\r\n        const {\r\n            logType,\r\n            selected_stock_id,\r\n            change,\r\n            crudGetMatching,\r\n            fetchStart,\r\n            fetchEnd,\r\n            showNotification\r\n        } = this.props;\r\n\r\n        // Dispatch an action letting react-admin know a API call is ongoing\r\n        fetchStart();\r\n\r\n        // As we want to know when the new post has been created in order to close the modal, we use the\r\n        // dataProvider directly\r\n        // let logObj = new LogModel();\r\n        // logObj.selected_stock_id = selected_stock_id;\r\n        // logObj.current_price = values.current_price;\r\n        // logObj.current_position = values.current_position;\r\n        // logObj.reason_ids = values.reason_ids;\r\n        // logObj.logType = values.logType;\r\n\r\n        values.selected_stock_id = selected_stock_id;\r\n\r\n        dataProvider(CREATE, 'LogModel', { data: values })\r\n            .then(({ data }) => {\r\n                // Refresh the choices of the ReferenceInput to ensure our newly created post\r\n                // always appear, even after selecting another post\r\n                crudGetMatching(\r\n                    'LogModel',\r\n                    '',\r\n                    { page: 1, perPage: 100 },\r\n                    { field: 'content', order: 'ASC' },\r\n                    {selected_stock_id: selected_stock_id}\r\n                );\r\n\r\n                // Update the main react-admin form (in this case, the comments creation form)\r\n                // change(REDUX_FORM_NAME, 'post_id', data.id);\r\n                this.setState({ showDialog: false });\r\n            })\r\n            .catch(error => {\r\n                showNotification(error.message, 'error');\r\n            })\r\n            .finally(() => {\r\n                // Dispatch an action letting react-admin know a API call has ended\r\n                fetchEnd();\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { showDialog } = this.state;\r\n        const { isSubmitting, logType } = this.props;\r\n        const logTypeName = LogSelect.find(x => x.id === logType).name;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Button onClick={this.handleClick} label={logTypeName}>\r\n                </Button>\r\n                <Dialog\r\n                    fullWidth\r\n                    open={showDialog}\r\n                    onClose={this.handleCloseClick}\r\n                    aria-label={\"新建理由 - \" + logTypeName}\r\n                >\r\n                    <DialogTitle>{\"新建理由 - \" + logTypeName}</DialogTitle>\r\n                    <DialogContent>\r\n                        <SimpleForm\r\n                            // We override the redux-form name to avoid collision with the react-admin main form\r\n                            form=\"log-quick-create\"\r\n                            resource=\"LogModel\"\r\n                            // We override the redux-form onSubmit prop to handle the submission ourselves\r\n                            onSubmit={this.handleSubmit}\r\n                            // We want no toolbar at all as we have our modal actions\r\n                            toolbar={null}\r\n                        >\r\n                            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\r\n                            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n                            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\r\n                            <NumberInput source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\r\n                            <NumberInput source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\r\n                            <NumberInput source=\"current_position\" label={\"当前仓位\"}/>\r\n                            <ReferenceArrayInput label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\" perPage={10000}\r\n                                                 sort={{ field: 'seq', order: 'ASC' }} filter={{ content: logTypeName }}>\r\n                                <SelectArrayInput optionText={reasonOptionRenderer}\r\n                                                  options={{\r\n                                                      fullWidth: true,\r\n                                                      fullWidthInput: true,\r\n                                                  }}\r\n                                />\r\n                            </ReferenceArrayInput>\r\n                            <SelectInput source=\"logType\" label={\"LOG类型\"} choices={LogSelect} defaultValue={logType} />\r\n                        </SimpleForm>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <SaveButton\r\n                            saving={isSubmitting}\r\n                            onClick={this.handleSaveClick}\r\n                        />\r\n                        <Button\r\n                            label=\"ra.action.cancel\"\r\n                            onClick={this.handleCloseClick}\r\n                        >\r\n                            <IconCancel />\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isSubmitting: isSubmitting('log-quick-create')(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    change,\r\n    crudGetMatching,\r\n    fetchEnd,\r\n    fetchStart,\r\n    showNotification,\r\n    submit\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(\r\n    LogQuickCreateButton\r\n);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { change, submit, isSubmitting } from 'redux-form';\r\nimport {\r\n    fetchEnd,\r\n    fetchStart,\r\n    required,\r\n    showNotification,\r\n    crudGetMatching,\r\n    Button,\r\n    SaveButton,\r\n    SimpleForm,\r\n    TextInput,\r\n    NumberInput,\r\n    LongTextInput,\r\n    ReferenceArrayInput,\r\n    SelectArrayInput,\r\n    SelectInput,\r\n    UPDATE,\r\n    Edit,\r\n    REDUX_FORM_NAME\r\n} from 'react-admin';\r\nimport IconContentAdd from '@material-ui/icons/Add';\r\nimport IconCancel from '@material-ui/icons/Cancel';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\n\r\nimport {dataProvider} from \"../models/data_provider_config\";\r\nimport LogModel, {LogType} from \"../models/LogModel\";\r\nimport {LogSelect, StarSelect, SuggestionSelect} from \"../models/LogModel\";\r\n\r\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\r\n\r\nclass LogQuickEditButton extends Component {\r\n    state = {\r\n        logObj: {},\r\n        error: false,\r\n        showDialog: false\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({ showDialog: true });\r\n    };\r\n\r\n    handleCloseClick = () => {\r\n        this.setState({ showDialog: false });\r\n    };\r\n\r\n    handleSaveClick = () => {\r\n        const { submit, record } = this.props;\r\n\r\n        // Trigger a submit of our custom quick create form\r\n        // This is needed because our modal action buttons are oustide the form\r\n        submit(`log-quick_edit_${record.id}`);\r\n    };\r\n\r\n    handleSubmit = values => {\r\n        const {\r\n            record,\r\n            change,\r\n            crudGetMatching,\r\n            fetchStart,\r\n            fetchEnd,\r\n            showNotification\r\n        } = this.props;\r\n\r\n        // Dispatch an action letting react-admin know a API call is ongoing\r\n        fetchStart();\r\n\r\n        // console.log(\"record: \" + JSON.stringify(record));\r\n        // console.log(\"values: \" + JSON.stringify(values));\r\n\r\n        // record.suggested_low_price = values.suggested_low_price;\r\n        // record.suggested_high_price = values.suggested_high_price;\r\n        // record.expected_low_price = values.expected_low_price;\r\n        // record.expected_high_price = values.expected_high_price;\r\n        // record.current_price = values.current_price;\r\n\r\n        dataProvider(UPDATE, 'LogModel', { id: values.id, data: values, previousData: record })\r\n            .then(({ data }) => {\r\n                // Refresh the choices of the ReferenceInput to ensure our newly created post\r\n                // always appear, even after selecting another post\r\n                crudGetMatching(\r\n                    'LogModel',\r\n                    '',\r\n                    { page: 1, perPage: 100 },\r\n                    { field: 'content', order: 'ASC' },\r\n                    {id: data.id}\r\n                );\r\n\r\n                // Update the main react-admin form (in this case, the comments creation form)\r\n                // change(REDUX_FORM_NAME, 'post_id', data.id);\r\n                this.setState({ showDialog: false });\r\n            })\r\n            .catch(error => {\r\n                showNotification(error.message, 'error');\r\n            })\r\n            .finally(() => {\r\n                // Dispatch an action letting react-admin know a API call has ended\r\n                fetchEnd();\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { showDialog } = this.state;\r\n        const { isSubmitting, record } = this.props;\r\n        let logType = LogSelect.find(x => (x.id === record.logType)).name;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Button onClick={this.handleClick} label=\"改价\">\r\n                </Button>\r\n                <Dialog\r\n                    fullWidth\r\n                    open={showDialog}\r\n                    onClose={this.handleCloseClick}\r\n                    aria-label=\"修改价格\"\r\n                    key={record.id}\r\n                >\r\n                    <DialogTitle>{logType + \" - 修改价格\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <SimpleForm\r\n                            key={record.id}\r\n                            // We override the redux-form name to avoid collision with the react-admin main form\r\n                            form={`log-quick_edit_${record.id}`}\r\n                            resource=\"LogModel\"\r\n                            // We override the redux-form onSubmit prop to handle the submission ourselves\r\n                            onSubmit={this.handleSubmit}\r\n                            // We want no toolbar at all as we have our modal actions\r\n                            toolbar={null}\r\n                            {...this.props}\r\n                        >\r\n                            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\r\n                            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n                            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\r\n                            <NumberInput source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\r\n                            <NumberInput source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\r\n\r\n                        </SimpleForm>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <SaveButton\r\n                            saving={isSubmitting}\r\n                            onClick={this.handleSaveClick}\r\n                        />\r\n                        <Button\r\n                            label=\"ra.action.cancel\"\r\n                            onClick={this.handleCloseClick}\r\n                        >\r\n                            <IconCancel />\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isSubmitting: isSubmitting('log-quick-edit')(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    change,\r\n    crudGetMatching,\r\n    fetchEnd,\r\n    fetchStart,\r\n    showNotification,\r\n    submit\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(\r\n    LogQuickEditButton\r\n);\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n    Button,\r\n    // useRefresh,\r\n    // useNotify,\r\n    // useUnselectAll,\r\n    GET_ONE\r\n} from 'react-admin';\r\nimport {dataProvider} from \"../models/data_provider_config\";\r\n\r\nimport axios from 'axios'\r\n\r\nconst AddToGroupButton = ({ selectedIds, resource }) => {\r\n    // const refresh = useRefresh();\r\n    // const notify = useNotify();\r\n    // const unselectAll = useUnselectAll();\r\n\r\n    const handleSubmit = () => {\r\n        // console.log(\"selectedIds: \", selectedIds);\r\n        dataProvider(GET_ONE, 'SelectedStockModel', { id: selectedIds[0] })\r\n            .then(response => {\r\n                // console.log(response.data); // { id: 123, title: \"hello, world\" }\r\n                let code = response.data.code;\r\n                axios.get(\"/addtogroup\",\r\n                    { params: {code: code}}\r\n                ).then(function (response) {\r\n                    // notify(response.data);\r\n                    // unselectAll(resource);\r\n                }).catch(function (err) {\r\n                    // notify('Error: addtogroup ' + err, 'warning')\r\n                });\r\n            });\r\n\r\n\r\n    };\r\n\r\n    return (\r\n            <Button\r\n                label=\"加入自选股\"\r\n                onClick={handleSubmit}\r\n            >\r\n            </Button>\r\n    );\r\n};\r\n\r\nexport default AddToGroupButton;\r\n","import React, { Fragment } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    List,\r\n    Filter,\r\n    Show,\r\n    SimpleShowLayout,\r\n    TextField,\r\n    NumberField,\r\n    DateField,\r\n    SelectField,\r\n    ImageField,\r\n    UrlField,\r\n    BooleanField,\r\n    RichTextField,\r\n    ReferenceManyField,\r\n    ReferenceArrayField,\r\n    SingleFieldList,\r\n    ChipField,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    EditButton,\r\n    SelectInput,\r\n    FormDataConsumer,\r\n    SimpleForm,\r\n    Pagination,\r\n    CardActions,\r\n    TextInput,\r\n    ShowButton,\r\n    DeleteButton,\r\n    BulkDeleteButton,\r\n    RefreshButton,\r\n    GET_MANY\r\n} from 'react-admin';\r\nimport {showNotification, CreateButton} from 'react-admin';\r\nimport { Link } from 'react-router-dom';\r\nimport { DateInput, DateTimeInput } from 'react-admin';\r\nimport moment from 'moment';\r\nimport {StrategyCategory, HyperParams, StatusSelect, Status} from '../models/SelectedStockModel'\r\nimport LogModel, {LogSelect, SuggestionSelect, StarSelect, LogType, SuggestionType} from \"../models/LogModel\";\r\nimport LogQuickCreateButton from \"../component/LogQuickCreateButton\"\r\nimport LogQuickEditButton from \"../component/LogQuickEditButton\"\r\nimport AddToGroupButton from \"../component/AddToGroupButton\"\r\nimport {dataProvider} from \"../models/data_provider_config\";\r\n\r\nconst cardActionStyle = {\r\n    zIndex: 2,\r\n    display: 'inline-block',\r\n    float: 'right',\r\n};\r\n\r\nconst getCatName = (id) => {\r\n    let res = StrategyCategory.find(x => x.id === id);\r\n    if(res){\r\n        return res.name;\r\n    }else{\r\n        return id;\r\n    }\r\n}\r\n\r\nconst StrategyField = ({ source, record = {} }) => <span>{ getCatName(record[source])}</span>;\r\n\r\nconst ListPagination = props => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />\r\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\r\nconst AxisPriceField = ({ source, record, ...props  }) => {\r\n    let axisPrice = (record.high + record.low + record.close)/3;\r\n    let resistPrice1 = 2 * axisPrice - record.low;\r\n    let resistPrice2 = axisPrice + record.high - record.low;\r\n    let resistPrice3 = resistPrice1 + record.high - record.low;\r\n    let supportPrice1 = 2 * axisPrice - record.high;\r\n    let supportPrice2 = axisPrice - (record.high - record.low);\r\n    let supportPrice3 = supportPrice1 - (record.high - record.low);\r\n\r\n    let upPrice = Math.max((1 + record.volatility) * record.close, resistPrice2);\r\n    let downPrice = Math.max((1 - record.volatility) * record.close, supportPrice1);\r\n    let suggestBuyPrice1 = Math.min((1 - record.volatility) * record.close, supportPrice2);\r\n    let suggestBuyPrice2 = Math.min((1 + record.volatility) * record.close, resistPrice1);\r\n\r\n    return (\r\n        <ul>\r\n             <li key=\"upPrice\">{\"止盈价格：\" + upPrice.toFixed(2)}</li>\r\n             <li key=\"downPrice\">{\"止损价格：\" + downPrice.toFixed(2)}</li>\r\n             <li key=\"suggestBuyPrice2\">{\"建议买入价格(高)：\" + suggestBuyPrice2.toFixed(2)}</li>\r\n             <li key=\"suggestBuyPrice1\">{\"建议买入价格(低)：\" + suggestBuyPrice1.toFixed(2)}</li>\r\n             <li key=\"resistPrice3\">{\"阻力3：\" + resistPrice3.toFixed(2)}</li>\r\n             <li key=\"resistPrice2\">{\"阻力2：\" + resistPrice2.toFixed(2)}</li>\r\n             <li key=\"resistPrice1\">{\"阻力1：\" + resistPrice1.toFixed(2)}</li>\r\n             <li key=\"axisPrice\">{\"轴 心 ：\" + axisPrice.toFixed(2)}</li>\r\n             <li key=\"supportPrice1\">{\"支撑1：\" + supportPrice1.toFixed(2)}</li>\r\n             <li key=\"supportPrice2\">{\"支撑2：\" + supportPrice2.toFixed(2)}</li>\r\n             <li key=\"supportPrice3\">{\"支撑3：\" + supportPrice3.toFixed(2)}</li>\r\n        </ul>\r\n    );\r\n}\r\nconst HyperParamsField = ({ source, record, ...props  }) => {\r\n    let hps = record.hyper_params.split(\" \");\r\n\r\n    return (\r\n        <ul>{\r\n            hps.map((item, index) => {\r\n                return (<li key={index}>{item}</li>);\r\n            })\r\n        }\r\n        </ul>\r\n    );\r\n}\r\n\r\nconst RedTextField = ({ source, record = {}, ...props }) => {\r\n    if(record[\"return2\"] > 0.03){\r\n        return <span style={{color: 'red'}} {...props} >{record[source]}</span>\r\n    }else{\r\n        return <span {...props} >{record[source]}</span>\r\n    }\r\n};\r\n\r\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\r\n    <CardActions style={cardActionStyle}>\r\n        <CreateButton basePath={basePath}/>\r\n        <RefreshButton/>\r\n    </CardActions>\r\n);\r\nconst BulkActionButtons = props => (\r\n    <Fragment>\r\n        <AddToGroupButton {...props}/>\r\n        {/* default bulk delete action */}\r\n        <BulkDeleteButton {...props} />\r\n    </Fragment>\r\n);\r\n\r\nconst ShowActions = ({ basePath, data, resource }) => (\r\n    <CardActions style={cardActionStyle}>\r\n        <Button component={Link}\r\n                to={{\r\n                    pathname: '/LogModel',\r\n                    state: { record: { selected_stock_id: data && data.id } },\r\n                }} color=\"primary\" >日志列表</Button>\r\n        {/* Add your custom actions */}\r\n        <Button component={Link}\r\n                    to={{\r\n                        pathname: '/LogModel/create',\r\n                        state: { record: { selected_stock_id: data && data.id } },\r\n                    }} color=\"primary\" >选股</Button>\r\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.BID} />\r\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.PRICING} />\r\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.ORDER} />\r\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.HOLD} />\r\n        <LogQuickCreateButton selected_stock_id={data && data.id} logType={LogType.SELL} />\r\n    </CardActions>\r\n);\r\n\r\nconst EditActions = ({ basePath, data, resource }) => (\r\n    <CardActions style={cardActionStyle}>\r\n        <ShowButton basePath={basePath} record={data} />\r\n    </CardActions>\r\n);\r\n\r\nconst ListFilter = (props) => (\r\n    <Filter {...props}>\r\n        <SelectInput label=\"策略\" source=\"strategy\" choices={StrategyCategory} filterdefaultvalues={StrategyCategory[0]} alwaysOn/>\r\n        <SelectInput label=\"超参数\" source=\"hyper_params\" choices={HyperParams} filterdefaultvalues=\"\" alwaysOn/>\r\n        <DateInput label=\"选股日期\" source=\"date\" filterdefaultvalues={moment().format('YYYY-MM-DD')} alwaysOn />\r\n        <TextInput label=\"股票编码\" source=\"code\" filterdefaultvalues=\"\" alwaysOn />\r\n        <TextInput label=\"搜索\" source=\"q\" filterdefaultvalues=\"\" alwaysOn />\r\n        <SelectInput label=\"状态\" source=\"status\" choices={StatusSelect} filterdefaultvalues=\"\" alwaysOn/>\r\n        <SelectInput label=\"隔天回报率\" source=\"hyper_params\" choices={HyperParams} filterdefaultvalues=\"\" alwaysOn/>\r\n    </Filter>\r\n);\r\n\r\nexport const SelectedStockList = (props) => (\r\n    <List {...props} title={\"选股列表\"} filters={<ListFilter />} sort={{field: 'date', order: 'DESC'}} perPage={25} pagination={<ListPagination />}\r\n          actions={<ListActions/>} bulkActionButtons={<BulkActionButtons />}>\r\n        <Datagrid options={{multiSelectable:true}} bodyoptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}}\r\n                  headeroptions={{adjustForCheckbox:true}} rowoptions={{selectable: true}} rowClick=\"expand\" expand={<LogShow />}>\r\n            {/*<TextField source=\"id\"/>*/}\r\n            <TextField source=\"date\" label={\"选股日期\"}/>\r\n            <RedTextField source=\"code\"label={\"代码\"}/>\r\n            <RedTextField source=\"name\"label={\"名称\"}/>\r\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <StrategyField source=\"strategy\" label={\"策略名称\"}/>\r\n            <HyperParamsField source=\"hyper_params\"label={\"超参数组合\"}/>\r\n            {/* <NumberField source=\"good_bad\"label={\"gb策略值\"}/>\r\n            <NumberField source=\"volatility\"label={\"波动率\"} options={{ style: 'percent', maximumFractionDigits: 2 }} />\r\n            <NumberField source=\"volat_price\"label={\"波动价格\"} options={{ style: 'currency', currency: 'CNY' }}/> */}\r\n            <AxisPriceField label={\"轴心价格\"}/>\r\n            {/* <NumberField source=\"vol50_change\"label={\"成交量变动\"} options={{ maximumFractionDigits: 2 }} /> */}\r\n            {/*<NumberField source=\"close_slope\"label={\"close斜率\"} options={{ maximumFractionDigits: 2 }} />*/}\r\n            {/*<NumberField source=\"open_slope\"label={\"open斜率\"} options={{ maximumFractionDigits: 2 }} />*/}\r\n            {/* <NumberField source=\"totalCapital\"label={\"流通市值\"} options={{ style: 'currency', currency: 'CNY' }}/> */}\r\n            <NumberField source=\"market_focus_per\"label={\"市场\"} options={{ style: 'percent', maximumFractionDigits: 2 }}/>\r\n            <NumberField source=\"return1\"label={\"隔天回报率\"} options={{ style: 'percent', maximumFractionDigits: 2 }}/>\r\n            <NumberField source=\"return2\"label={\"当天回报率\"} options={{ style: 'percent', maximumFractionDigits: 2 }}/>\r\n            <SelectField source=\"status\" label={\"状态\"} choices={StatusSelect} />\r\n            <EditButton/>\r\n            <ShowButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const LogShow = (props) => (\r\n    <Show title=\"l\" actions={<ShowActions/>} {...props}>\r\n    <SimpleShowLayout>\r\n    <ReferenceManyField\r\n        label=\"\"\r\n        reference=\"LogModel\"\r\n        target=\"selected_stock_id\"\r\n        sort={{ field: 'createdAt', order: 'ASC' }}\r\n    >\r\n        <Datagrid options={{multiSelectable:true}}>\r\n            <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n            <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\r\n            <TextField source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\r\n            <TextField source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\r\n            <TextField source=\"current_price\" label={\"当前价格\"}/>\r\n            <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\r\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <TextField source=\"score\" label={\"评分\"}/>\r\n            <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\"\r\n                                 sort={{ field: 'seq', order: 'ASC' }}>\r\n                <SingleFieldList>\r\n                    <ChipField source=\"content\" />\r\n                </SingleFieldList>\r\n            </ReferenceArrayField>\r\n            <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\r\n            <DateField source=\"updatedAt\" locales=\"zh-CN\" showTime label=\"更新时间\"/>\r\n            <RichTextField source=\"comment\" label={\"操作评价\"}/>\r\n            <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\r\n            <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\r\n            <LogQuickEditButton  />\r\n            <EditButton />\r\n        </Datagrid>\r\n    </ReferenceManyField>\r\n    </SimpleShowLayout>\r\n    </Show>\r\n);\r\n\r\nexport const SelectedStockShow = (props) => (\r\n    <Show title=\"选股详情\" actions={<ShowButton/>} {...props}>\r\n        <SimpleShowLayout>\r\n            <TextField source=\"date\" label={\"选股日期\"}/>\r\n            <TextField source=\"strategy\" label={\"策略名称\"}/>\r\n            <TextField source=\"hyper_params\"label={\"超参数组合\"}/>\r\n            <TextField source=\"code\"label={\"代码\"}/>\r\n            <TextField source=\"name\"label={\"名称\"}/>\r\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <TextField source=\"good_bad\"label={\"gb策略值\"}/>\r\n            <TextField source=\"good\"label={\"当天good值\"}/>\r\n            <TextField source=\"bad\"label={\"当天bad值\"}/>\r\n            <TextField source=\"volatility\"label={\"波动率\"}/>\r\n            <TextField source=\"volat_price\"label={\"波动价格\"}/>\r\n            <TextField source=\"totalCapital\"label={\"流通市值\"}/>\r\n            <TextField source=\"vol50_change\"label={\"成交量变动\"}/>\r\n            <SelectField source=\"status\" label={\"状态\"} choices={StatusSelect} />\r\n            <DateField source=\"updatedAt\" locales=\"zh-CN\" showTime label=\"更新时间\"/>\r\n            <LogShow {...props}/>\r\n        </SimpleShowLayout>\r\n    </Show>\r\n);\r\n\r\nexport const SelectedStockEdit = (props) => (\r\n    <Edit title={\"编辑选中股票\"} actions={<EditActions/>} {...props}>\r\n        <SimpleForm>\r\n            <TextField source=\"id\"/>\r\n            <TextField source=\"date\" label={\"选股日期\"}/>\r\n            <TextField source=\"strategy\" label={\"策略名称\"}/>\r\n            <TextField source=\"hyper_params\"label={\"超参数组合\"}/>\r\n            <TextField source=\"code\"label={\"代码\"}/>\r\n            <TextField source=\"name\"label={\"名称\"}/>\r\n            <SelectInput source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <FormDataConsumer>\r\n                {({ formData, ...rest }) => {\r\n                    if (parseInt(formData.star) >= 3 && formData.status === Status.SELECTED) {\r\n                        formData.status = Status.CANDIDATED;\r\n                    }\r\n                    return (\r\n                        <SelectInput source=\"status\" label={\"状态\"} choices={StatusSelect} />\r\n                    )\r\n                }\r\n                }\r\n            </FormDataConsumer>\r\n\r\n            <ReferenceManyField\r\n                label=\"\"\r\n                reference=\"LogModel\"\r\n                target=\"selected_stock_id\"\r\n                sort={{ field: 'createdAt', order: 'ASC' }}\r\n            >\r\n                <Datagrid>\r\n                    <TextField source=\"suggested_low_price\" label={\"建议买入价格(低)\"}/>\r\n                    <TextField source=\"suggested_high_price\" label={\"建议买入价格(高)\"}/>\r\n                    <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\r\n                    <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n                    <TextField source=\"current_price\" label={\"当前价格\"}/>\r\n                    <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\r\n                    <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n                    <TextField source=\"score\" label={\"评分\"}/>\r\n                    <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\"\r\n                                         sort={{ field: 'seq', order: 'ASC' }}>\r\n                        <SingleFieldList>\r\n                            <ChipField source=\"content\" />\r\n                        </SingleFieldList>\r\n                    </ReferenceArrayField>\r\n                    <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\r\n                    <DateField source=\"updatedAt\" locales=\"zh-CN\" showTime label=\"更新时间\"/>\r\n                    <RichTextField source=\"comment\" label={\"操作评价\"}/>\r\n                    <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\r\n                    <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\r\n                    <EditButton />\r\n                </Datagrid>\r\n            </ReferenceManyField>\r\n        </SimpleForm>\r\n\r\n    </Edit>\r\n);\r\n\r\nexport const SelectedStockCreate = (props) => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"date\" label={\"选股日期\"}/>\r\n            <TextInput source=\"strategy\" label={\"策略名称\"}/>\r\n            <TextInput source=\"hyper_params\"label={\"超参数组合\"}/>\r\n            <TextInput source=\"code\"label={\"代码\"}/>\r\n            <TextInput source=\"name\"label={\"名称\"}/>\r\n            <SelectInput source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <TextInput source=\"good_bad\"label={\"gb策略值\"}/>\r\n            <TextInput source=\"good\"label={\"当天good值\"}/>\r\n            <TextInput source=\"bad\"label={\"当天bad值\"}/>\r\n            <TextInput source=\"volatility\"label={\"波动率\"}/>\r\n            <TextInput source=\"volat_price\"label={\"波动价格\"}/>\r\n            <TextInput source=\"totalCapital\"label={\"流通市值\"}/>\r\n            <TextInput source=\"vol50_change\"label={\"成交量变动\"}/>\r\n            <SelectInput source=\"status\" label={\"状态\"} choices={StatusSelect} />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n","import Parse from 'parse/node';\r\nimport debug from 'debug';\r\nimport {LogType} from \"./LogModel\";\r\n\r\nexport class ReasonModel extends Parse.Object {\r\n    constructor() {\r\n        // Pass the ClassName to the Parse.Object constructor\r\n        super('ReasonModel');\r\n\r\n        this.seq = 0;//顺序\r\n        this.content = \"\";//理由\r\n        this.score = 0;//分数;-1 - 负面；1 - 正面；0 - 中性\r\n    }\r\n\r\n    findAll() {\r\n        var query = new Parse.Query(ReasonModel);\r\n        // query.notEqualTo(\"contentType\", 'img');\r\n        return query.find();\r\n    }\r\n\r\n    findByUrl(url) {\r\n        var query = new Parse.Query(ReasonModel);\r\n        query.equalTo(\"url\", url);\r\n        return query.find();\r\n    }\r\n\r\n    refreshDataFromParse() {\r\n      return {\r\n        'id': this.get(\"objectId\"),\r\n      }\r\n    }\r\n\r\n    deleteAll() {\r\n        this.findAll().then(function(news) {\r\n            // console.log(\"deleting \" + JSON.stringify(posts));\r\n            Parse.Object.destroyAll(news);\r\n        }, function(error) {\r\n            console.log(\"deleteAll error \" + JSON.stringify(error));\r\n        });\r\n    }\r\n\r\n    delete() {\r\n        this.destroy({\r\n            success: function(myObject) {\r\n                // The object was deleted from the Parse Cloud.\r\n                debug(\"Successfully deleted \" + myObject.content);\r\n            },\r\n            error: function(myObject, error) {\r\n                // The delete failed.\r\n                // error is a Parse.Error with an error code and message.\r\n                debug(\"deleted error:\" + error);\r\n            }\r\n        });\r\n    }\r\n\r\n    update() {\r\n        return this.save();\r\n    }\r\n\r\n}\r\n\r\nParse.Object.registerSubclass('ReasonModel', ReasonModel);\r\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { change, submit, isSubmitting } from 'redux-form';\nimport {\n    fetchEnd,\n    fetchStart,\n    required,\n    showNotification,\n    crudGetMatching,\n    Button,\n    SaveButton,\n    SimpleForm,\n    TextInput,\n    NumberInput,\n    LongTextInput,\n    CREATE,\n    REDUX_FORM_NAME\n} from 'react-admin';\nimport IconContentAdd from '@material-ui/icons/Add';\nimport IconCancel from '@material-ui/icons/Cancel';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport {dataProvider} from \"../models/data_provider_config\";\nimport {ReasonModel} from \"../models/ReasonModel\";\n\nclass ReasonQuickCreateButton extends Component {\n    state = {\n        error: false,\n        showDialog: false\n    };\n\n    handleClick = () => {\n        this.setState({ showDialog: true });\n    };\n\n    handleCloseClick = () => {\n        this.setState({ showDialog: false });\n    };\n\n    handleSaveClick = () => {\n        const { submit } = this.props;\n\n        // Trigger a submit of our custom quick create form\n        // This is needed because our modal action buttons are oustide the form\n        submit('reason-quick-create');\n    };\n\n    handleSubmit = values => {\n        const {\n            change,\n            crudGetMatching,\n            fetchStart,\n            fetchEnd,\n            showNotification\n        } = this.props;\n\n        // Dispatch an action letting react-admin know a API call is ongoing\n        fetchStart();\n\n        // As we want to know when the new post has been created in order to close the modal, we use the\n        // dataProvider directly\n        let reason = new ReasonModel();\n        reason.content = values.content;\n        reason.score = values.score;\n\n        dataProvider(CREATE, 'ReasonModel', { data: values })\n            .then(({ data }) => {\n                // Refresh the choices of the ReferenceInput to ensure our newly created post\n                // always appear, even after selecting another post\n                crudGetMatching(\n                    'ReasonModel',\n                    '',\n                    { page: 1, perPage: 100 },\n                    { field: 'content', order: 'ASC' },\n                    {}\n                );\n\n                // Update the main react-admin form (in this case, the comments creation form)\n                // change(REDUX_FORM_NAME, 'post_id', data.id);\n                this.setState({ showDialog: false });\n            })\n            .catch(error => {\n                showNotification(error.message, 'error');\n            })\n            .finally(() => {\n                // Dispatch an action letting react-admin know a API call has ended\n                fetchEnd();\n            });\n    };\n\n    render() {\n        const { showDialog } = this.state;\n        const { isSubmitting } = this.props;\n\n        return (\n            <Fragment>\n                <Button onClick={this.handleClick} label=\"ra.action.create\">\n                    <IconContentAdd />\n                </Button>\n                <Dialog\n                    fullWidth\n                    open={showDialog}\n                    onClose={this.handleCloseClick}\n                    aria-label=\"新建理由\"\n                >\n                    <DialogTitle>新建理由</DialogTitle>\n                    <DialogContent>\n                        <SimpleForm\n                            // We override the redux-form name to avoid collision with the react-admin main form\n                            form=\"reason-quick-create\"\n                            resource=\"ReasonModel\"\n                            // We override the redux-form onSubmit prop to handle the submission ourselves\n                            onSubmit={this.handleSubmit}\n                            // We want no toolbar at all as we have our modal actions\n                            toolbar={null}\n                        >\n                            <NumberInput source=\"seq\" label={\"顺序\"}/>\n                            <TextInput source=\"content\" label={\"理由\"}/>\n                            <NumberInput source=\"score\" label={\"分数\"}/>\n                        </SimpleForm>\n                    </DialogContent>\n                    <DialogActions>\n                        <SaveButton\n                            saving={isSubmitting}\n                            onClick={this.handleSaveClick}\n                        />\n                        <Button\n                            label=\"ra.action.cancel\"\n                            onClick={this.handleCloseClick}\n                        >\n                            <IconCancel />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    isSubmitting: isSubmitting('reason-quick-create')(state)\n});\n\nconst mapDispatchToProps = {\n    change,\n    crudGetMatching,\n    fetchEnd,\n    fetchStart,\n    showNotification,\n    submit\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    ReasonQuickCreateButton\n);\n","import React, {Fragment} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n    GET_MANY,\r\n    List,\r\n    Show,\r\n    SimpleShowLayout,\r\n    TextField,\r\n    DateField,\r\n    SelectField,\r\n    ImageField,\r\n    UrlField,\r\n    RichTextField,\r\n    SingleFieldList,\r\n    ReferenceField,\r\n    ChipField,\r\n    BooleanInput,\r\n    BooleanField,\r\n    ReferenceInput,\r\n    ReferenceArrayInput,\r\n    SelectArrayInput,\r\n    Filter,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    EditButton,\r\n    SelectInput,\r\n    SimpleForm,\r\n    TextInput,\r\n    LongTextInput,\r\n    DateTimeInput,\r\n    NumberInput,\r\n    ReferenceArrayField,\r\n    CardActions,\r\n    ShowButton,\r\n    CreateButton,\r\n    DeleteButton,\r\n    RefreshButton,\r\n    SaveButton,\r\n    Toolbar,\r\n    FormDataConsumer,\r\n    showNotification\r\n} from 'react-admin';\r\nimport {SuggestionSelect, LogSelect, StarSelect, LogType, SuggestionType} from \"../models/LogModel\";\r\nimport ReasonQuickCreateButton from \"../component/ReasonQuickCreateButton\"\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport {dataProvider} from \"../models/data_provider_config\";\r\n\r\nconst cardActionStyle = {\r\n    zIndex: 2,\r\n    display: 'inline-block',\r\n    float: 'right',\r\n};\r\n\r\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\r\n    <CardActions style={cardActionStyle}>\r\n        <CreateButton basePath={basePath}/>\r\n        <RefreshButton/>\r\n    </CardActions>\r\n);\r\n\r\nconst LogFilter = (props) => (\r\n    <Filter {...props}>\r\n        <ReferenceInput label=\"待选股票\" source=\"selected_stock_id\" reference=\"SelectedStockModel\" alwaysOn>\r\n            <SelectInput optionText={selectStockOptionRenderer} />\r\n        </ReferenceInput>\r\n    </Filter>\r\n);\r\n\r\nconst ReasonReferenceInput = props => (\r\n    <Fragment>\r\n        <ReferenceArrayInput {...props}>\r\n            <SelectArrayInput optionText={reasonOptionRenderer} options={{ fullWidth: true }}\r\n            />\r\n        </ReferenceArrayInput>\r\n\r\n        <ReasonQuickCreateButton />\r\n    </Fragment>\r\n);\r\n\r\nconst selectStockOptionRenderer = stock => `${stock.code} - ${stock.name}`;\r\nconst reasonOptionRenderer = reason => `${reason.content} : ${reason.score}`;\r\n//返回到选中股票的详情页面\r\nconst redirect = (basePath, id, data) => `/SelectedStockModel/${data.selected_stock_id}/edit`;\r\n\r\nexport const LogList = (props) => (\r\n    <List {...props} title=\"日志列表\" filters={<LogFilter />} sort={{field: 'crawlAt', order: 'DESC'}} perPage={25} actions={<ListActions/>}>\r\n        <Datagrid options={{multiSelectable:true}} bodyOptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}} headerOptions={{adjustForCheckbox:true}} rowOptions={{selectable: true}}>\r\n            {/*<TextField source=\"id\"/>*/}\r\n            <ReferenceField label=\"股票\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\r\n                <TextField source={selectStockOptionRenderer} />\r\n            </ReferenceField>\r\n            <TextField source=\"suggested_low_price\" label={\"建议较低价格\"}/>\r\n            <TextField source=\"suggested_high_price\" label={\"建议较高价格\"}/>\r\n            <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\r\n            <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n            <TextField source=\"current_price\" label={\"当前价格\"}/>\r\n            <TextField source=\"current_position\" label={\"当前仓位\"}/>\r\n            <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\r\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <TextField source=\"score\" label={\"评分\"}/>\r\n            <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\">\r\n                <SingleFieldList>\r\n                    <ChipField source=\"content\" />\r\n                </SingleFieldList>\r\n            </ReferenceArrayField>\r\n            <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\r\n            <RichTextField source=\"comment\" label={\"操作评价\"}/>\r\n            <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\r\n            <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\r\n            <DeleteButton/>\r\n            <EditButton/>\r\n            <ShowButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const LogShow = (props) => (\r\n    <Show {...props}>\r\n        <SimpleShowLayout>\r\n            <ReferenceField label=\"股票\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\r\n                <TextField source={selectStockOptionRenderer} />\r\n            </ReferenceField>\r\n            <TextField source=\"suggested_low_price\" label={\"建议较低价格\"}/>\r\n            <TextField source=\"suggested_high_price\" label={\"建议较高价格\"}/>\r\n            <TextField source=\"expected_low_price\" label={\"止损价格\"}/>\r\n            <TextField source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n            <TextField source=\"current_price\" label={\"当前价格\"}/>\r\n            <TextField source=\"current_position\" label={\"当前仓位\"}/>\r\n            <SelectField source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\r\n            <SelectField source=\"star\" label={\"评级\"} choices={StarSelect} />\r\n            <TextField source=\"score\" label={\"评分\"}/>\r\n            <ReferenceArrayField label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\">\r\n                <SingleFieldList>\r\n                    <ChipField source=\"content\" />\r\n                </SingleFieldList>\r\n            </ReferenceArrayField>\r\n            <SelectField source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\r\n            <RichTextField source=\"comment\" label={\"操作评价\"}/>\r\n            <BooleanField source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\r\n            <DateField source=\"commentTime\" locales=\"zh-CN\" showTime label=\"操作评价时间\"/>\r\n        </SimpleShowLayout>\r\n    </Show>\r\n);\r\n\r\nexport const LogEdit = (props) => (\r\n    <Edit title=\"日志编辑\" {...props}>\r\n        <SimpleForm redirect={redirect}>\r\n            <TextField source=\"id\"/>\r\n            <ReferenceInput label=\"待选股\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\r\n                <SelectInput optionText={selectStockOptionRenderer} />\r\n            </ReferenceInput>\r\n            <NumberInput source=\"suggested_low_price\"  label={\"建议较低价格\"}/>\r\n            <NumberInput source=\"suggested_high_price\" label={\"建议较高价格\"}/>\r\n            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\r\n            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\r\n            <NumberInput source=\"current_position\" label={\"当前仓位\"}/>\r\n            <FormDataConsumer>\r\n                {({ formData, ...rest }) => {\r\n                    // console.log(\"formData.reason_ids: \" + JSON.stringify(formData.reason_ids));\r\n                    dataProvider(GET_MANY, 'ReasonModel', { ids: formData.reason_ids})\r\n                        .then((list) => {\r\n                            // console.log(\"GET_LIST: \" + JSON.stringify(list));\r\n                            let robjs = new ReasonCollection(...list.data);\r\n                            let count = robjs.sum(\"score\");\r\n                            // console.log(\"count: \" + count);\r\n                            formData.score = count;\r\n\r\n                            let value = StarSelect.find(x => ((x.id === count.toString()) || (x.id === \"6\" && count > 5) || (x.id === \"-1\" && count < 0)));\r\n                            // console.log(\"value: \" + value);\r\n                            let star = value?value.id: \"\";\r\n                            // console.log(\"star: \" + star);\r\n                            formData.star = star;\r\n\r\n                            if (!formData.logType || formData.logType === LogType.CANDIDATE || formData.logType === LogType.UNCANDIDATE) {\r\n                                if (count >= 3) {\r\n                                    formData.suggested_action = SuggestionType.BUY;\r\n                                    formData.logType = LogType.CANDIDATE;\r\n                                } else {\r\n                                    formData.suggested_action = SuggestionType.NONE;\r\n                                    formData.logType = LogType.UNCANDIDATE;\r\n                                }\r\n                            }\r\n                        })\r\n                        .catch((e) => {\r\n                            showNotification('Error: get reasons failed', 'warning')\r\n                        });\r\n                    return (\r\n                        <Fragment>\r\n                            <SelectInput source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\r\n                            <SelectInput source=\"star\" label={\"评级\"}\r\n                                         choices={StarSelect}/>\r\n                            <NumberInput source=\"score\" label={\"评分\"}/>\r\n                        </Fragment>\r\n                    )\r\n                }\r\n                }\r\n            </FormDataConsumer>\r\n            <ReasonReferenceInput label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\" perPage={10000}\r\n                                 sort={{ field: 'seq', order: 'ASC' }}/>\r\n            <SelectInput source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\r\n            <RichTextInput source=\"comment\" label={\"操作评价\"}/>\r\n            <BooleanInput source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\r\n            <TextField source=\"commentTime\" label=\"操作评价时间\" options={{ format: 'YYYY-MM-dd, HH:mm:ss', ampm: false, clearable: true }} />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nclass ReasonCollection extends Array {\r\n    sum(key) {\r\n        return this.reduce((a, b) => a + (b[key] || 0), 0);\r\n    }\r\n}\r\n\r\nexport const LogCreate = (props) => (\r\n    <Create {...props}>\r\n        <SimpleForm redirect={redirect}>\r\n            <TextField source=\"id\" />\r\n            <ReferenceInput label=\"待选股\" source=\"selected_stock_id\" reference=\"SelectedStockModel\">\r\n                <SelectInput optionText={selectStockOptionRenderer} />\r\n            </ReferenceInput>\r\n            <NumberInput source=\"suggested_low_price\"  label={\"建议较低价格\"}/>\r\n            <NumberInput source=\"suggested_high_price\" label={\"建议较高价格\"}/>\r\n            <NumberInput source=\"expected_low_price\" label={\"止损价格\"}/>\r\n            <NumberInput source=\"expected_high_price\" label={\"止盈价格\"}/>\r\n            <NumberInput source=\"current_price\" label={\"当前价格\"}/>\r\n            <NumberInput source=\"current_position\" label={\"当前仓位\"}/>\r\n\r\n            <FormDataConsumer>\r\n                {({ formData, ...rest }) => {\r\n                    // console.log(\"formData.reason_ids: \" + JSON.stringify(formData.reason_ids));\r\n                    dataProvider(GET_MANY, 'ReasonModel', { ids: formData.reason_ids})\r\n                        .then((list) => {\r\n                            // console.log(\"GET_LIST: \" + JSON.stringify(list));\r\n                            let robjs = new ReasonCollection(...list.data);\r\n                            let count = robjs.sum(\"score\");\r\n                            // console.log(\"count: \" + count);\r\n                            formData.score = count;\r\n\r\n                            let value = StarSelect.find(x => ((x.id === count.toString()) || (x.id === \"6\" && count > 5) || (x.id === \"-1\" && count < 0)));\r\n                            // console.log(\"value: \" + value);\r\n                            let star = value?value.id: \"\";\r\n                            // console.log(\"star: \" + star);\r\n                            formData.star = star;\r\n\r\n                            if (!formData.logType || formData.logType === LogType.CANDIDATE || formData.logType === LogType.UNCANDIDATE) {\r\n                                if (count > 3) {\r\n                                    formData.suggested_action = SuggestionType.BUY;\r\n                                    formData.logType = LogType.CANDIDATE;\r\n                                } else {\r\n                                    formData.suggested_action = SuggestionType.NONE;\r\n                                    formData.logType = LogType.UNCANDIDATE;\r\n                                }\r\n                            }\r\n                        })\r\n                        .catch((e) => {\r\n                            showNotification('Error: get reasons failed', 'warning')\r\n                        });\r\n                    return (\r\n                        <Fragment>\r\n                            <SelectInput source=\"suggested_action\" label={\"推荐动作\"} choices={SuggestionSelect} />\r\n                            <SelectInput source=\"star\" label={\"评级\"}\r\n                                         choices={StarSelect}/>\r\n                            <NumberInput source=\"score\" label={\"评分\"}/>\r\n                        </Fragment>\r\n                    )\r\n                }\r\n                }\r\n            </FormDataConsumer>\r\n            <ReasonReferenceInput label=\"理由\" reference=\"ReasonModel\" source=\"reason_ids\" perPage={10000}\r\n                                 sort={{ field: 'seq', order: 'ASC' }} />\r\n            <SelectInput source=\"logType\" label={\"LOG类型\"} choices={LogSelect} />\r\n            <RichTextInput source=\"comment\" label={\"操作评价\"}/>\r\n            <BooleanInput source=\"isSuccessful\" valueLabelTrue=\"满意\" valueLabelFalse=\"不满意\" label=\"操作是否满意\"/>\r\n            <TextField source=\"commentTime\" label=\"操作评价时间\" options={{ format: 'YYYY-MM-dd, HH:mm:ss', ampm: false, clearable: true }} />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {\r\n    List,\r\n    Show,\r\n    SimpleShowLayout,\r\n    TextField,\r\n    DateField,\r\n    SelectField,\r\n    ImageField,\r\n    UrlField,\r\n    RichTextField,\r\n    SingleFieldList,\r\n    ReferenceField,\r\n    ReferenceInput,\r\n    ReferenceArrayInput,\r\n    SelectArrayInput,\r\n    Filter,\r\n    Edit,\r\n    Create,\r\n    Datagrid,\r\n    EditButton,\r\n    SelectInput,\r\n    SimpleForm,\r\n    TextInput,\r\n    NumberInput,\r\n    ReferenceArrayField,\r\n    CardActions,\r\n    ShowButton,\r\n    CreateButton,\r\n    DeleteButton,\r\n    RefreshButton,\r\n    SaveButton,\r\n    Toolbar,\r\n    showNotification\r\n} from 'react-admin';\r\n\r\nconst cardActionStyle = {\r\n    zIndex: 2,\r\n    display: 'inline-block',\r\n    float: 'right',\r\n};\r\n\r\nconst ListActions = ({resource, filters, displayedFilters, filterValues, basePath, showFilter}) => (\r\n    <CardActions style={cardActionStyle}>\r\n        <CreateButton basePath={basePath}/>\r\n        <RefreshButton/>\r\n    </CardActions>\r\n);\r\n\r\nconst ReasonFilter = (props) => (\r\n    <Filter {...props}>\r\n\r\n    </Filter>\r\n);\r\n\r\nconst CreateToolbar = props => (\r\n    <Toolbar {...props} >\r\n        <SaveButton\r\n            label=\"保存\"\r\n            redirect=\"list\"\r\n            submitOnEnter={true}\r\n        />\r\n        <SaveButton\r\n            label=\"保存并新增\"\r\n            redirect={false}\r\n            submitOnEnter={false}\r\n            variant=\"flat\"\r\n        />\r\n    </Toolbar>\r\n);\r\n\r\nexport const ReasonList = (props) => (\r\n    <List {...props} title=\"日志列表\" filters={<ReasonFilter />} sort={{field: 'seq', order: 'ASC'}} perPage={50} actions={<ListActions/>}>\r\n        <Datagrid options={{multiSelectable:true}} bodyOptions={{ stripedRows: true, showRowHover: true , displayRowCheckbox:true}} headerOptions={{adjustForCheckbox:true}} rowOptions={{selectable: true}}>\r\n            {/*<TextField source=\"id\"/>*/}\r\n            <TextField source=\"seq\" label={\"顺序\"}/>\r\n            <TextField source=\"content\" label={\"理由\"}/>\r\n            <TextField source=\"score\" label={\"分数\"}/>\r\n            <DeleteButton/>\r\n            <EditButton/>\r\n            <ShowButton/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const ReasonShow = (props) => (\r\n    <Show {...props}>\r\n        <SimpleShowLayout>\r\n            <TextField source=\"seq\" label={\"顺序\"}/>\r\n            <TextField source=\"content\" label={\"理由\"}/>\r\n            <TextField source=\"score\" label={\"分数\"}/>\r\n        </SimpleShowLayout>\r\n    </Show>\r\n);\r\n\r\nexport const ReasonEdit = (props) => (\r\n    <Edit title=\"日志编辑\" {...props}>\r\n        <SimpleForm toolbar={<CreateToolbar />} redirect=\"List\">\r\n            <TextField source=\"id\"/>\r\n            <NumberInput source=\"seq\" label={\"顺序\"} step={10}/>\r\n            <TextInput source=\"content\" label={\"理由\"}/>\r\n            <NumberInput source=\"score\" label={\"分数\"}/>\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const ReasonCreate = (props) => (\r\n    <Create {...props}>\r\n        <SimpleForm toolbar={<CreateToolbar />} redirect=\"List\">\r\n            <TextField source=\"id\" />\r\n            <NumberInput source=\"seq\" label={\"顺序\"} step={10}/>\r\n            <TextInput source=\"content\" label={\"理由\"}/>\r\n            <NumberInput source=\"score\" label={\"分数\"}/>\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n","import axios from 'axios';\r\n\r\nlet url = 'http://win10:8000';\r\n\r\nconst instance = axios.create({\r\n    baseURL: url\r\n});\r\n\r\n// instance.interceptors.request.use(\r\n//     async config => {\r\n//         const token = await AsyncStorage.getItem('token');\r\n//         const userKey = await AsyncStorage.getItem('userKey');\r\n//         const time = Date.now();\r\n//         const signature = md5.hex_md5(`${userKey}:${token}:${time}`);\r\n//\r\n//         if (token && userKey) {\r\n//             config.headers.token = token;\r\n//             config.headers.time = time;\r\n//             config.headers.signature = signature;\r\n//         }\r\n//         return config;\r\n//     },\r\n//     err => {\r\n//         return Promise.reject(err);\r\n//     }\r\n// );\r\n\r\nexport default instance;\r\n","import React, {useState, useCallback} from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { Title } from 'react-admin';\r\nimport {stockApi} from '../../models/api'\r\nimport SelectedStocksTable from \"./SelectedStocks\";\r\n\r\nconst styles = {\r\n    flex: { display: 'flex' },\r\n    flexColumn: { display: 'flex', flexDirection: 'column' },\r\n    leftCol: { flex: 1, marginRight: '1em' },\r\n    rightCol: { flex: 1, marginLeft: '1em' },\r\n    singleCol: { marginTop: '2em', marginBottom: '2em' },\r\n};\r\n\r\nexport default () => {\r\n\r\n\r\n    return (\r\n        <div style={styles.flex}>\r\n            <div style={styles.leftCol}>\r\n                <div style={styles.singleCol}>\r\n                    <SelectedStocksTable/>\r\n                </div>\r\n            </div>\r\n            <div style={styles.rightCol}>\r\n                <div style={styles.singleCol}>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Admin, Resource } from 'react-admin';\r\n\r\nimport { SelectedStockList, SelectedStockShow, SelectedStockEdit, SelectedStockCreate } from './screens/SelectedStockList';\r\nimport { LogList, LogShow, LogEdit, LogCreate } from './screens/LogList';\r\nimport { ReasonList, ReasonShow, ReasonEdit, ReasonCreate } from './screens/ReasonList';\r\nimport {dataProvider, authProvider} from \"./models/data_provider_config\";\r\nimport Dashboard from './screens/dashboard/Dashboard';\r\n\r\nconst App = () => (\r\n    <Admin\r\n        title=\"Stock Log - 交易记录\"\r\n        dashboard={Dashboard}\r\n        dataProvider={dataProvider}\r\n        authProvider={authProvider}\r\n    >\r\n        <Resource name=\"SelectedStockModel\" options={{ label: \"选股列表\" }} list={SelectedStockList} show={SelectedStockShow} edit={SelectedStockEdit} create={SelectedStockCreate}  />\r\n        <Resource name=\"LogModel\" options={{ label: \"日志列表\" }} list={LogList} show={LogShow} edit={LogEdit} create={LogCreate}  />\r\n        <Resource name=\"ReasonModel\" options={{ label: \"理由列表\" }} list={ReasonList} show={ReasonShow} edit={ReasonEdit} create={ReasonCreate}  />\r\n    </Admin>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}